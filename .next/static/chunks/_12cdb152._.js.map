{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/components/MessageItem.tsx"],"sourcesContent":["import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport rehypeHighlight from 'rehype-highlight';\nimport type { Message } from '../types/chat';\n\ninterface MessageItemProps {\n  message: Message;\n}\n\nexport const MessageItem: React.FC<MessageItemProps> = ({ message }) => {\n  const isUser = message.sender === 'user';\n\n  return (\n    <div style={{ \n      display: 'flex', \n      justifyContent: isUser ? 'flex-end' : 'flex-start', \n      marginBottom: '16px' \n    }}>\n      <div style={{ \n        backgroundColor: isUser ? '#2196f3' : '#e3f2fd', \n        color: isUser ? 'white' : '#333',\n        padding: '12px 16px', \n        borderRadius: '18px',\n        maxWidth: '70%',\n        wordBreak: 'break-word'\n      }}>\n        <div className=\"message-content\" style={isUser ? {\n          whiteSpace: 'pre-wrap',\n          fontFamily: 'ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace',\n          fontSize: '13px',\n          lineHeight: '1.4'\n        } : undefined}>\n          {isUser ? (\n            message.content\n          ) : (\n            <ReactMarkdown \n              remarkPlugins={[remarkGfm]}\n              rehypePlugins={[rehypeHighlight]}\n            >\n              {message.content}\n            </ReactMarkdown>\n          )}\n        </div>\n        <div style={{ \n          fontSize: '12px', \n          opacity: 0.7, \n          marginTop: '4px',\n          textAlign: 'right'\n        }}>\n          {message.timestamp.toLocaleTimeString()}\n        </div>\n      </div>\n    </div>\n  );\n};"],"names":[],"mappings":";;;;;AACA;AACA;AACA;;;;;AAOO,MAAM,cAA0C;QAAC,EAAE,OAAO,EAAE;IACjE,MAAM,SAAS,QAAQ,MAAM,KAAK;IAElC,qBACE,6LAAC;QAAI,OAAO;YACV,SAAS;YACT,gBAAgB,SAAS,aAAa;YACtC,cAAc;QAChB;kBACE,cAAA,6LAAC;YAAI,OAAO;gBACV,iBAAiB,SAAS,YAAY;gBACtC,OAAO,SAAS,UAAU;gBAC1B,SAAS;gBACT,cAAc;gBACd,UAAU;gBACV,WAAW;YACb;;8BACE,6LAAC;oBAAI,WAAU;oBAAkB,OAAO,SAAS;wBAC/C,YAAY;wBACZ,YAAY;wBACZ,UAAU;wBACV,YAAY;oBACd,IAAI;8BACD,SACC,QAAQ,OAAO,iBAEf,6LAAC,sMAAa;wBACZ,eAAe;4BAAC,2JAAS;yBAAC;wBAC1B,eAAe;4BAAC,iKAAe;yBAAC;kCAE/B,QAAQ,OAAO;;;;;;;;;;;8BAItB,6LAAC;oBAAI,OAAO;wBACV,UAAU;wBACV,SAAS;wBACT,WAAW;wBACX,WAAW;oBACb;8BACG,QAAQ,SAAS,CAAC,kBAAkB;;;;;;;;;;;;;;;;;AAK/C;KA7Ca","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/components/MessageList.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport type { Message } from '../types/chat';\nimport { MessageItem } from './MessageItem';\n\ninterface MessageListProps {\n  messages: Message[];\n  isLoading: boolean;\n}\n\nexport const MessageList: React.FC<MessageListProps> = ({ messages, isLoading }) => {\n  const bottomRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    bottomRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  return (\n    <div style={{ \n      flex: 1, \n      padding: '16px', \n      overflowY: 'auto',\n      backgroundColor: '#fafafa'\n    }}>\n      {messages.length === 0 && (\n        <div style={{ \n          textAlign: 'center', \n          color: '#666', \n          marginTop: '50px' \n        }}>\n          Start a conversation with the AI chatbot!\n        </div>\n      )}\n      \n      {messages.map((message) => (\n        <MessageItem key={message.id} message={message} />\n      ))}\n      \n      {isLoading && (\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'flex-start', \n          marginBottom: '16px' \n        }}>\n          <div style={{ \n            backgroundColor: '#e3f2fd', \n            padding: '12px 16px', \n            borderRadius: '18px',\n            maxWidth: '70%',\n            color: '#666'\n          }}>\n            Thinking...\n          </div>\n        </div>\n      )}\n      \n      <div ref={bottomRef} />\n    </div>\n  );\n};"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;;AAOO,MAAM,cAA0C;QAAC,EAAE,QAAQ,EAAE,SAAS,EAAE;;IAC7E,MAAM,YAAY,IAAA,uKAAM,EAAiB;IAEzC,IAAA,0KAAS;iCAAC;gBACR;aAAA,qBAAA,UAAU,OAAO,cAAjB,yCAAA,mBAAmB,cAAc,CAAC;gBAAE,UAAU;YAAS;QACzD;gCAAG;QAAC;KAAS;IAEb,qBACE,6LAAC;QAAI,OAAO;YACV,MAAM;YACN,SAAS;YACT,WAAW;YACX,iBAAiB;QACnB;;YACG,SAAS,MAAM,KAAK,mBACnB,6LAAC;gBAAI,OAAO;oBACV,WAAW;oBACX,OAAO;oBACP,WAAW;gBACb;0BAAG;;;;;;YAKJ,SAAS,GAAG,CAAC,CAAC,wBACb,6LAAC,mJAAW;oBAAkB,SAAS;mBAArB,QAAQ,EAAE;;;;;YAG7B,2BACC,6LAAC;gBAAI,OAAO;oBACV,SAAS;oBACT,gBAAgB;oBAChB,cAAc;gBAChB;0BACE,cAAA,6LAAC;oBAAI,OAAO;wBACV,iBAAiB;wBACjB,SAAS;wBACT,cAAc;wBACd,UAAU;wBACV,OAAO;oBACT;8BAAG;;;;;;;;;;;0BAMP,6LAAC;gBAAI,KAAK;;;;;;;;;;;;AAGhB;GAjDa;KAAA","debugId":null}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/components/MessageInput.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport type { KeyboardEvent } from \"react\";\n\ninterface MessageInputProps {\n  onSendMessage: (message: string) => void;\n  isLoading: boolean;\n}\n\nexport const MessageInput: React.FC<MessageInputProps> = ({ onSendMessage, isLoading }) => {\n  const [message, setMessage] = useState(\"\");\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleSend = () => {\n    if (message.trim() && !isLoading) {\n      onSendMessage(message.trim());\n      setMessage(\"\");\n      // テキストエリアの高さをリセット\n      if (textareaRef.current) {\n        textareaRef.current.style.height = \"auto\";\n      }\n    }\n  };\n\n  // テキストエリアの高さを自動調整\n  const adjustTextareaHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = \"auto\";\n      textareaRef.current.style.height = Math.min(textareaRef.current.scrollHeight, 120) + \"px\";\n    }\n  };\n\n  useEffect(() => {\n    adjustTextareaHeight();\n  }, [message]);\n\n  const handleKeyPress = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.key === \"Enter\" && !event.shiftKey) {\n      event.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <div\n      style={{\n        padding: \"16px\",\n        borderTop: \"1px solid #ddd\",\n        backgroundColor: \"white\",\n      }}\n    >\n      <div style={{ display: \"flex\", gap: \"8px\", alignItems: \"flex-end\" }}>\n        <textarea\n          ref={textareaRef}\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Type your message here... (Shift+Enter for new line)\"\n          disabled={isLoading}\n          rows={1}\n          style={{\n            flex: 1,\n            padding: \"5px\",\n            border: \"1px solid #ddd\",\n            borderRadius: \"12px\",\n            outline: \"none\",\n            fontSize: \"14px\",\n            resize: \"none\",\n            fontFamily: \"inherit\",\n            lineHeight: \"1.4\",\n            minHeight: \"40px\",\n            maxHeight: \"120px\",\n            overflowY: \"auto\",\n          }}\n        />\n        <button\n          onClick={handleSend}\n          disabled={!message.trim() || isLoading}\n          style={{\n            padding: \"8px 16px\",\n            backgroundColor: \"#2196f3\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"20px\",\n            cursor: isLoading || !message.trim() ? \"not-allowed\" : \"pointer\",\n            opacity: isLoading || !message.trim() ? 0.5 : 1,\n            fontSize: \"14px\",\n            fontWeight: \"bold\",\n            minWidth: \"60px\",\n            height: \"55px\",\n          }}\n        >\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;;AAAA;;;;AAQO,MAAM,eAA4C;QAAC,EAAE,aAAa,EAAE,SAAS,EAAE;;IACpF,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,yKAAQ,EAAC;IACvC,MAAM,cAAc,IAAA,uKAAM,EAAsB;IAEhD,MAAM,aAAa;QACjB,IAAI,QAAQ,IAAI,MAAM,CAAC,WAAW;YAChC,cAAc,QAAQ,IAAI;YAC1B,WAAW;YACX,kBAAkB;YAClB,IAAI,YAAY,OAAO,EAAE;gBACvB,YAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG;YACrC;QACF;IACF;IAEA,kBAAkB;IAClB,MAAM,uBAAuB;QAC3B,IAAI,YAAY,OAAO,EAAE;YACvB,YAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG;YACnC,YAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,GAAG,CAAC,YAAY,OAAO,CAAC,YAAY,EAAE,OAAO;QACvF;IACF;IAEA,IAAA,0KAAS;kCAAC;YACR;QACF;iCAAG;QAAC;KAAQ;IAEZ,MAAM,iBAAiB,CAAC;QACtB,IAAI,MAAM,GAAG,KAAK,WAAW,CAAC,MAAM,QAAQ,EAAE;YAC5C,MAAM,cAAc;YACpB;QACF;IACF;IAEA,qBACE,6LAAC;QACC,OAAO;YACL,SAAS;YACT,WAAW;YACX,iBAAiB;QACnB;kBAEA,cAAA,6LAAC;YAAI,OAAO;gBAAE,SAAS;gBAAQ,KAAK;gBAAO,YAAY;YAAW;;8BAChE,6LAAC;oBACC,KAAK;oBACL,OAAO;oBACP,UAAU,CAAC,IAAM,WAAW,EAAE,MAAM,CAAC,KAAK;oBAC1C,YAAY;oBACZ,aAAY;oBACZ,UAAU;oBACV,MAAM;oBACN,OAAO;wBACL,MAAM;wBACN,SAAS;wBACT,QAAQ;wBACR,cAAc;wBACd,SAAS;wBACT,UAAU;wBACV,QAAQ;wBACR,YAAY;wBACZ,YAAY;wBACZ,WAAW;wBACX,WAAW;wBACX,WAAW;oBACb;;;;;;8BAEF,6LAAC;oBACC,SAAS;oBACT,UAAU,CAAC,QAAQ,IAAI,MAAM;oBAC7B,OAAO;wBACL,SAAS;wBACT,iBAAiB;wBACjB,OAAO;wBACP,QAAQ;wBACR,cAAc;wBACd,QAAQ,aAAa,CAAC,QAAQ,IAAI,KAAK,gBAAgB;wBACvD,SAAS,aAAa,CAAC,QAAQ,IAAI,KAAK,MAAM;wBAC9C,UAAU;wBACV,YAAY;wBACZ,UAAU;wBACV,QAAQ;oBACV;8BACD;;;;;;;;;;;;;;;;;AAMT;GAxFa;KAAA","debugId":null}},
    {"offset": {"line": 327, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/services/chatService.ts"],"sourcesContent":["import { ChatOpenAI } from \"@langchain/openai\";\nimport { BaseMessage, HumanMessage, SystemMessage, AIMessage } from \"@langchain/core/messages\";\n\nconst OPENAI_API_KEY = process.env.NEXT_PUBLIC_OPENAI_API_KEY;\n\nclass ChatService {\n  private model: ChatOpenAI;\n  private baseSystemMessage: string;\n  private currentLearningTopic: string;\n  private conversationHistory: BaseMessage[];\n\n  constructor() {\n    if (!OPENAI_API_KEY) {\n      throw new Error(\"OpenAI API key is required. Please set NEXT_PUBLIC_API_KEY in your environment variables.\");\n    }\n\n    this.model = new ChatOpenAI({\n      apiKey: OPENAI_API_KEY,\n      model: \"gpt-4\",\n      temperature: 0.7,\n    });\n\n    // ベースのシステムメッセージ\n    //     this.baseSystemMessage = `\n    //     # 役割\n    //     あなたは，親しみのあるプロのプログラミング教員です．\n\n    //     # 命令\n    //     プログラミングに関連する問題を作ることを通して、**{LEARNING_TOPIC}**の考え方を用いて日常生活の問題解決の方法を考えられるようになりたいです。\n    //     あなたは私が提示したテーマについて，**{LEARNING_TOPIC}**によって解決できる問題を作成するための質問を私に投げかけてください．\n    //     例えば，「そのテーマではどのようなデータが数値として記録されるのですか？」「そのデータはどのように計算されるのですか？」などです．\n    //     私はプログラミング初心者なので，親切で分かりやすい説明を心がけて下さい．\n\n    //     # 問題について\n    //     - 回答は JavaScript のソースコード\n    //     - 多くても 20 行ほどの量に抑える\n    //     - 私が興味のある分野と関連している\n\n    //     # 対話上の注意\n    //     - 出力はマークダウン形式で行ってください。\n    //     - あなたが 1 から問題や答えを示すのではなく、私自身が答えを導けるようにヒントや質問を投げかけてください。\n    //     - **{LEARNING_TOPIC}**がどのような条件の時に適用できるのかということを常に私に考えさせてください。\n    //     - 対話を進める中であなたが必要だと思った場合は，私にどんどん質問して下さい．\n    //     - 質問は 1 つの対話につき 1 つにして下さい．\n    // `;\n\n    this.baseSystemMessage = `\n    私はuser，あなたはassistantです．以下のやり取りの通りに対話を進めて．\n    user: 野球に関する問題を作成したいです\n    assistant: それは素晴らしいアイデアですね！ 野球は多くの数値データが存在するので、制御構造を適用するのに適しています。それではまず、野球に関連するどの種類のデータに興味がありますか？例えば、選手の成績、試合結果、チームの順位などがありますね。\n    user: チーム打率とかですかね\n    assistant: なるほど，いいですね！それでは、チーム打率を計算するためには、どのようなデータが必要だと思いますか？また、それらのデータはどのように計算されると思いますか？\n    user: 各選手の打数と安打数です．それぞれ合計して，安打数/打数で計算するのがいいと思います\n    assistant: それは正解です！チーム打率は、全選手の安打数を全選手の打数で割ることで計算されます。それでは、プログラム上でこれをどのように実装するか考えてみましょう。打数と安打数のデータをどのように格納しますか？リストや辞書などが使えますね。\n    user: 辞書ってなんですか？\n    assistant: 辞書とは、Pythonのデータ構造の一つで、キーと値のペアを格納するものです。例えば、各選手の名前をキーとし、その選手の打数と安打数を値とする辞書を作成することができます。以下に一例を示します。\n    players = [\n    {\"name\": \"選手A\", \"hits\": 100, \"at_bats\": 300},\n    {\"name\": \"選手B\", \"hits\": 110, \"at_bats\": 350},\n    {\"name\": \"選手C\", \"hits\": 120, \"at_bats\": 400},\n    # 以降、選手が続く...\n    ]\n\n    `;\n\n    this.currentLearningTopic = \"制御構造\";\n\n    // 対話履歴を初期化（localStorageから復元またはシステムメッセージから開始）\n    this.conversationHistory = this.loadConversationHistory();\n  }\n\n  // 学習項目を設定するメソッド\n  setLearningTopic(topic: string): void {\n    this.currentLearningTopic = topic;\n    // 履歴をクリアして新しいシステムメッセージで開始\n    this.clearHistory();\n  }\n\n  // 現在のシステムメッセージを生成\n  private getCurrentSystemMessage(): string {\n    return this.baseSystemMessage.replace(/{LEARNING_TOPIC}/g, this.currentLearningTopic);\n  }\n\n  async sendMessage(message: string): Promise<string> {\n    try {\n      // ユーザーメッセージを履歴に追加\n      const userMessage = new HumanMessage(message);\n      this.conversationHistory.push(userMessage);\n\n      // 現在の対話履歴全体でAPIを呼び出し\n      const response = await this.model.invoke(this.conversationHistory);\n\n      // AIの返答を履歴に追加\n      const aiMessage = new AIMessage(response.content as string);\n      this.conversationHistory.push(aiMessage);\n\n      // localStorageに保存\n      this.saveConversationHistory();\n\n      return response.content as string;\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      throw new Error(\"Failed to send message. Please check your API key and try again.\");\n    }\n  }\n\n  // localStorageから対話履歴を読み込む\n  private loadConversationHistory(): BaseMessage[] {\n    try {\n      const stored = localStorage.getItem(\"conversationHistory\");\n      if (stored) {\n        type HistoryItem = { type: \"system\" | \"human\" | \"ai\"; content: string };\n        const historyData: HistoryItem[] = JSON.parse(stored);\n        return historyData.map((msg) => {          \n          switch (msg.type) {\n            case \"system\":\n              return new SystemMessage(msg.content);\n            case \"human\":\n              return new HumanMessage(msg.content);\n            case \"ai\":\n              return new AIMessage(msg.content);\n            default:\n              return new SystemMessage(this.baseSystemMessage);\n          }\n        });\n      }\n    } catch (error) {\n      console.error(\"Failed to load conversation history from localStorage:\", error);\n    }\n    return [new SystemMessage(this.getCurrentSystemMessage())];\n  }\n\n  // localStorageに対話履歴を保存する\n  private saveConversationHistory(): void {\n    try {\n      const historyData = this.conversationHistory.map((msg) => {\n        let type = \"system\";\n        if (msg instanceof HumanMessage) type = \"human\";\n        else if (msg instanceof AIMessage) type = \"ai\";\n        else if (msg instanceof SystemMessage) type = \"system\";\n\n        return {\n          type,\n          content: msg.content,\n        };\n      });\n      localStorage.setItem(\"conversationHistory\", JSON.stringify(historyData));\n    } catch (error) {\n      console.error(\"Failed to save conversation history to localStorage:\", error);\n    }\n  }\n\n  // 対話履歴をクリアするメソッド\n  clearHistory(): void {\n    this.conversationHistory = [new SystemMessage(this.getCurrentSystemMessage())];\n    this.saveConversationHistory();\n  }\n\n  // 対話履歴を取得するメソッド（デバッグ用）\n  getHistory(): BaseMessage[] {\n    return [...this.conversationHistory];\n  }\n}\n\nexport const chatService = new ChatService();\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 475, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/components/ChatContainer.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type { Message } from '../types/chat';\nimport { MessageList } from './MessageList';\nimport { MessageInput } from './MessageInput';\nimport { chatService } from '../services/chatService';\n\nexport const ChatContainer: React.FC = () => {\n  // localStorageからメッセージ履歴を読み込む\n  const loadMessages = (): Message[] => {\n    try {\n      const stored = localStorage.getItem('chatMessages');\n      if (stored) {\n        const parsedMessages = JSON.parse(stored) as Message[];\n        return parsedMessages.map((msg) => ({\n          ...msg,\n          timestamp: new Date(msg.timestamp)\n        }));\n      }\n    } catch (error) {\n      console.error('Failed to load messages from localStorage:', error);\n    }\n    return [];\n  };\n\n  const [messages, setMessages] = useState<Message[]>(loadMessages);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // メッセージをlocalStorageに保存\n  const saveMessages = (msgs: Message[]) => {\n    try {\n      localStorage.setItem('chatMessages', JSON.stringify(msgs));\n    } catch (error) {\n      console.error('Failed to save messages to localStorage:', error);\n    }\n  };\n\n  // messagesが変更されたらlocalStorageに保存\n  useEffect(() => {\n    saveMessages(messages);\n  }, [messages]);\n\n  const handleSendMessage = async (content: string) => {\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      content,\n      sender: 'user',\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n\n    try {\n      const botResponse = await chatService.sendMessage(content);\n      const botMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: botResponse,\n        sender: 'bot',\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: 'Sorry, I encountered an error. Please try again.',\n        sender: 'bot',\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, errorMessage]);\n      console.error('Failed to send message:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleClearHistory = () => {\n    chatService.clearHistory();\n    setMessages([]);\n    localStorage.removeItem('chatMessages');\n  };\n\n  return (\n    <div style={{ \n      display: 'flex', \n      flexDirection: 'column', \n      height: '100vh', \n      width: '100%',\n      border: 'none',\n      borderRadius: '0',\n      overflow: 'hidden'\n    }}>\n      <div style={{ \n        backgroundColor: '#f5f5f5', \n        padding: '16px', \n        borderBottom: '1px solid #ddd',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      }}>\n        <span style={{ fontWeight: 'bold' }}>作問用チャットボット</span>\n        <button\n          onClick={handleClearHistory}\n          style={{\n            padding: '6px 12px',\n            border: '1px solid #ddd',\n            borderRadius: '4px',\n            backgroundColor: 'white',\n            cursor: 'pointer',\n            fontSize: '12px'\n          }}\n        >\n          🗑️ 履歴クリア\n        </button>\n      </div>\n      \n      <MessageList messages={messages} isLoading={isLoading} />\n      <MessageInput onSendMessage={handleSendMessage} isLoading={isLoading} />\n      \n    </div>\n  );\n};"],"names":[],"mappings":";;;;;AAAA;AAEA;AACA;AACA;;;;;;;AAEO,MAAM,gBAA0B;;IACrC,6BAA6B;IAC7B,MAAM,eAAe;QACnB,IAAI;YACF,MAAM,SAAS,aAAa,OAAO,CAAC;YACpC,IAAI,QAAQ;gBACV,MAAM,iBAAiB,KAAK,KAAK,CAAC;gBAClC,OAAO,eAAe,GAAG,CAAC,CAAC,MAAQ,CAAC;wBAClC,GAAG,GAAG;wBACN,WAAW,IAAI,KAAK,IAAI,SAAS;oBACnC,CAAC;YACH;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8CAA8C;QAC9D;QACA,OAAO,EAAE;IACX;IAEA,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,yKAAQ,EAAY;IACpD,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,yKAAQ,EAAC;IAE3C,wBAAwB;IACxB,MAAM,eAAe,CAAC;QACpB,IAAI;YACF,aAAa,OAAO,CAAC,gBAAgB,KAAK,SAAS,CAAC;QACtD,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4CAA4C;QAC5D;IACF;IAEA,iCAAiC;IACjC,IAAA,0KAAS;mCAAC;YACR,aAAa;QACf;kCAAG;QAAC;KAAS;IAEb,MAAM,oBAAoB,OAAO;QAC/B,MAAM,cAAuB;YAC3B,IAAI,KAAK,GAAG,GAAG,QAAQ;YACvB;YACA,QAAQ;YACR,WAAW,IAAI;QACjB;QAEA,YAAY,CAAA,OAAQ;mBAAI;gBAAM;aAAY;QAC1C,aAAa;QAEb,IAAI;YACF,MAAM,cAAc,MAAM,gJAAW,CAAC,WAAW,CAAC;YAClD,MAAM,aAAsB;gBAC1B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,EAAE,QAAQ;gBAC7B,SAAS;gBACT,QAAQ;gBACR,WAAW,IAAI;YACjB;YAEA,YAAY,CAAA,OAAQ;uBAAI;oBAAM;iBAAW;QAC3C,EAAE,OAAO,OAAO;YACd,MAAM,eAAwB;gBAC5B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,EAAE,QAAQ;gBAC7B,SAAS;gBACT,QAAQ;gBACR,WAAW,IAAI;YACjB;YAEA,YAAY,CAAA,OAAQ;uBAAI;oBAAM;iBAAa;YAC3C,QAAQ,KAAK,CAAC,2BAA2B;QAC3C,SAAU;YACR,aAAa;QACf;IACF;IAEA,MAAM,qBAAqB;QACzB,gJAAW,CAAC,YAAY;QACxB,YAAY,EAAE;QACd,aAAa,UAAU,CAAC;IAC1B;IAEA,qBACE,6LAAC;QAAI,OAAO;YACV,SAAS;YACT,eAAe;YACf,QAAQ;YACR,OAAO;YACP,QAAQ;YACR,cAAc;YACd,UAAU;QACZ;;0BACE,6LAAC;gBAAI,OAAO;oBACV,iBAAiB;oBACjB,SAAS;oBACT,cAAc;oBACd,SAAS;oBACT,gBAAgB;oBAChB,YAAY;gBACd;;kCACE,6LAAC;wBAAK,OAAO;4BAAE,YAAY;wBAAO;kCAAG;;;;;;kCACrC,6LAAC;wBACC,SAAS;wBACT,OAAO;4BACL,SAAS;4BACT,QAAQ;4BACR,cAAc;4BACd,iBAAiB;4BACjB,QAAQ;4BACR,UAAU;wBACZ;kCACD;;;;;;;;;;;;0BAKH,6LAAC,mJAAW;gBAAC,UAAU;gBAAU,WAAW;;;;;;0BAC5C,6LAAC,qJAAY;gBAAC,eAAe;gBAAmB,WAAW;;;;;;;;;;;;AAIjE;GApHa;KAAA","debugId":null}},
    {"offset": {"line": 658, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/components/ProblemInput.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\ninterface ProblemInputProps {\n  onProblemChange: (problem: string) => void;\n  initialValue?: string;\n}\n\nexport const ProblemInput: React.FC<ProblemInputProps> = ({ onProblemChange, initialValue = '' }) => {\n  const [problem, setProblem] = useState(initialValue);\n\n  // initialValueが変更されたら内部状態を更新\n  useEffect(() => {\n    setProblem(initialValue);\n  }, [initialValue]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    setProblem(value);\n    onProblemChange(value);\n  };\n\n  return (\n    <div style={{ \n      height: '30%', \n      display: 'flex', \n      flexDirection: 'column',\n      borderBottom: '1px solid #ddd'\n    }}>\n      <div style={{ \n        padding: '12px 16px', \n        backgroundColor: '#f8f9fa',\n        borderBottom: '1px solid #ddd',\n        fontWeight: 'bold',\n        fontSize: '14px'\n      }}>\n        問題文\n      </div>\n      <textarea\n        value={problem}\n        onChange={handleChange}\n        placeholder=\"ここに問題文を入力してください...\"\n        style={{\n          flex: 1,\n          padding: '16px',\n          border: 'none',\n          outline: 'none',\n          resize: 'none',\n          fontFamily: 'inherit',\n          fontSize: '14px',\n          lineHeight: '1.6'\n        }}\n      />\n    </div>\n  );\n};"],"names":[],"mappings":";;;;;AAAA;;;;AAOO,MAAM,eAA4C;QAAC,EAAE,eAAe,EAAE,eAAe,EAAE,EAAE;;IAC9F,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,yKAAQ,EAAC;IAEvC,6BAA6B;IAC7B,IAAA,0KAAS;kCAAC;YACR,WAAW;QACb;iCAAG;QAAC;KAAa;IAEjB,MAAM,eAAe,CAAC;QACpB,MAAM,QAAQ,EAAE,MAAM,CAAC,KAAK;QAC5B,WAAW;QACX,gBAAgB;IAClB;IAEA,qBACE,6LAAC;QAAI,OAAO;YACV,QAAQ;YACR,SAAS;YACT,eAAe;YACf,cAAc;QAChB;;0BACE,6LAAC;gBAAI,OAAO;oBACV,SAAS;oBACT,iBAAiB;oBACjB,cAAc;oBACd,YAAY;oBACZ,UAAU;gBACZ;0BAAG;;;;;;0BAGH,6LAAC;gBACC,OAAO;gBACP,UAAU;gBACV,aAAY;gBACZ,OAAO;oBACL,MAAM;oBACN,SAAS;oBACT,QAAQ;oBACR,SAAS;oBACT,QAAQ;oBACR,YAAY;oBACZ,UAAU;oBACV,YAAY;gBACd;;;;;;;;;;;;AAIR;GA/Ca;KAAA","debugId":null}},
    {"offset": {"line": 743, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/components/CodeEditor.tsx"],"sourcesContent":["import React from \"react\";\nimport Editor from \"@monaco-editor/react\";\n\ninterface CodeEditorProps {\n  value: string;\n  onChange: (value: string | undefined) => void;\n  language: string;\n  onLanguageChange: (language: string) => void;\n}\n\nconst LANGUAGES = [\n  { value: \"typescript\", label: \"TypeScript\" },\n  { value: \"javascript\", label: \"JavaScript\" },\n  { value: \"python\", label: \"Python\" },\n  { value: \"java\", label: \"Java\" },\n  { value: \"cpp\", label: \"C++\" },\n  { value: \"c\", label: \"C\" },\n  { value: \"csharp\", label: \"C#\" },\n  { value: \"go\", label: \"Go\" },\n  { value: \"rust\", label: \"Rust\" },\n  { value: \"php\", label: \"PHP\" },\n  { value: \"ruby\", label: \"Ruby\" },\n  { value: \"swift\", label: \"Swift\" },\n  { value: \"kotlin\", label: \"Kotlin\" },\n  { value: \"html\", label: \"HTML\" },\n  { value: \"css\", label: \"CSS\" },\n  { value: \"json\", label: \"JSON\" },\n  { value: \"sql\", label: \"SQL\" },\n  { value: \"shell\", label: \"Shell\" },\n];\n\nexport const CodeEditor: React.FC<CodeEditorProps> = ({ value, onChange, language, onLanguageChange }) => {\n  return (\n    <div\n      style={{\n        height: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        minHeight: 0,\n      }}\n    >\n      <div\n        style={{\n          padding: \"12px 16px\",\n          backgroundColor: \"#f8f9fa\",\n          borderBottom: \"1px solid #ddd\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <span style={{ fontWeight: \"bold\", fontSize: \"14px\" }}>解答ソースコード</span>\n        <select\n          value={language}\n          onChange={(e) => onLanguageChange(e.target.value)}\n          style={{\n            padding: \"4px 8px\",\n            borderRadius: \"4px\",\n            border: \"1px solid #ddd\",\n            backgroundColor: \"white\",\n            fontSize: \"12px\",\n          }}\n        >\n          {LANGUAGES.map((lang) => (\n            <option key={lang.value} value={lang.value}>\n              {lang.label}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div style={{ flex: 1 }}>\n        <Editor\n          height=\"100%\"\n          language={language}\n          value={value}\n          onChange={onChange}\n          theme=\"vs-dark\"\n          options={{\n            minimap: { enabled: false },\n            fontSize: 14,\n            lineNumbers: \"on\",\n            roundedSelection: false,\n            scrollBeyondLastLine: false,\n            automaticLayout: true,\n            tabSize: 2,\n            insertSpaces: true,\n            wordWrap: \"on\",\n            contextmenu: true,\n            selectOnLineNumbers: true,\n            glyphMargin: false,\n            folding: true,\n            foldingHighlight: true,\n            showFoldingControls: \"mouseover\",\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;;AACA;;;AASA,MAAM,YAAY;IAChB;QAAE,OAAO;QAAc,OAAO;IAAa;IAC3C;QAAE,OAAO;QAAc,OAAO;IAAa;IAC3C;QAAE,OAAO;QAAU,OAAO;IAAS;IACnC;QAAE,OAAO;QAAQ,OAAO;IAAO;IAC/B;QAAE,OAAO;QAAO,OAAO;IAAM;IAC7B;QAAE,OAAO;QAAK,OAAO;IAAI;IACzB;QAAE,OAAO;QAAU,OAAO;IAAK;IAC/B;QAAE,OAAO;QAAM,OAAO;IAAK;IAC3B;QAAE,OAAO;QAAQ,OAAO;IAAO;IAC/B;QAAE,OAAO;QAAO,OAAO;IAAM;IAC7B;QAAE,OAAO;QAAQ,OAAO;IAAO;IAC/B;QAAE,OAAO;QAAS,OAAO;IAAQ;IACjC;QAAE,OAAO;QAAU,OAAO;IAAS;IACnC;QAAE,OAAO;QAAQ,OAAO;IAAO;IAC/B;QAAE,OAAO;QAAO,OAAO;IAAM;IAC7B;QAAE,OAAO;QAAQ,OAAO;IAAO;IAC/B;QAAE,OAAO;QAAO,OAAO;IAAM;IAC7B;QAAE,OAAO;QAAS,OAAO;IAAQ;CAClC;AAEM,MAAM,aAAwC;QAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE;IACnG,qBACE,6LAAC;QACC,OAAO;YACL,QAAQ;YACR,SAAS;YACT,eAAe;YACf,WAAW;QACb;;0BAEA,6LAAC;gBACC,OAAO;oBACL,SAAS;oBACT,iBAAiB;oBACjB,cAAc;oBACd,SAAS;oBACT,gBAAgB;oBAChB,YAAY;gBACd;;kCAEA,6LAAC;wBAAK,OAAO;4BAAE,YAAY;4BAAQ,UAAU;wBAAO;kCAAG;;;;;;kCACvD,6LAAC;wBACC,OAAO;wBACP,UAAU,CAAC,IAAM,iBAAiB,EAAE,MAAM,CAAC,KAAK;wBAChD,OAAO;4BACL,SAAS;4BACT,cAAc;4BACd,QAAQ;4BACR,iBAAiB;4BACjB,UAAU;wBACZ;kCAEC,UAAU,GAAG,CAAC,CAAC,qBACd,6LAAC;gCAAwB,OAAO,KAAK,KAAK;0CACvC,KAAK,KAAK;+BADA,KAAK,KAAK;;;;;;;;;;;;;;;;0BAM7B,6LAAC;gBAAI,OAAO;oBAAE,MAAM;gBAAE;0BACpB,cAAA,6LAAC,2LAAM;oBACL,QAAO;oBACP,UAAU;oBACV,OAAO;oBACP,UAAU;oBACV,OAAM;oBACN,SAAS;wBACP,SAAS;4BAAE,SAAS;wBAAM;wBAC1B,UAAU;wBACV,aAAa;wBACb,kBAAkB;wBAClB,sBAAsB;wBACtB,iBAAiB;wBACjB,SAAS;wBACT,cAAc;wBACd,UAAU;wBACV,aAAa;wBACb,qBAAqB;wBACrB,aAAa;wBACb,SAAS;wBACT,kBAAkB;wBAClB,qBAAqB;oBACvB;;;;;;;;;;;;;;;;;AAKV;KAnEa","debugId":null}},
    {"offset": {"line": 941, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/components/RightPanel.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { ProblemInput } from \"./ProblemInput\";\nimport { CodeEditor } from \"./CodeEditor\";\nimport { useProblem } from \"../contexts/ProblemContext\";\n\nconst DEFAULT_CODE_TEMPLATES: Record<string, string> = {\n  typescript: \"// ここにコードを書いてください\\nfunction solution() {\\n  \\n}\\n\",\n  javascript: \"// ここにコードを書いてください\\nfunction solution() {\\n  \\n}\\n\",\n  python: \"# ここにコードを書いてください\\ndef solution():\\n    pass\\n\",\n  java: \"// ここにコードを書いてください\\npublic class Solution {\\n    public void solution() {\\n        \\n    }\\n}\\n\",\n  cpp: \"// ここにコードを書いてください\\n#include <iostream>\\nusing namespace std;\\n\\nvoid solution() {\\n    \\n}\\n\",\n  c: \"// ここにコードを書いてください\\n#include <stdio.h>\\n\\nvoid solution() {\\n    \\n}\\n\",\n  csharp: \"// ここにコードを書いてください\\nusing System;\\n\\npublic class Solution {\\n    public void solution() {\\n        \\n    }\\n}\\n\",\n  go: '// ここにコードを書いてください\\npackage main\\n\\nimport \"fmt\"\\n\\nfunc solution() {\\n    \\n}\\n',\n  rust: \"// ここにコードを書いてください\\nfn solution() {\\n    \\n}\\n\",\n  php: \"<?php\\n// ここにコードを書いてください\\nfunction solution() {\\n    \\n}\\n\",\n  ruby: \"# ここにコードを書いてください\\ndef solution\\n  \\nend\\n\",\n  swift: \"// ここにコードを書いてください\\nfunc solution() {\\n    \\n}\\n\",\n  kotlin: \"// ここにコードを書いてください\\nfun solution() {\\n    \\n}\\n\",\n  html: \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Solution</title>\\n</head>\\n<body>\\n    \\n</body>\\n</html>\\n\",\n  css: \"/* ここにCSSを書いてください */\\n.solution {\\n    \\n}\\n\",\n  json: '{\\n    \"solution\": \"ここにJSONを書いてください\"\\n}\\n',\n  sql: \"-- ここにSQLを書いてください\\nSELECT * FROM table_name;\\n\",\n  shell: '#!/bin/bash\\n# ここにシェルスクリプトを書いてください\\necho \"Hello World\"\\n',\n};\n\nexport const RightPanel: React.FC = () => {\n  const router = useRouter();\n  const { problemData, setProblemData } = useProblem();\n  \n  // ProblemContextから初期値を設定\n  const [language, setLanguage] = useState(problemData.language || \"typescript\");\n  const [code, setCode] = useState(problemData.code || DEFAULT_CODE_TEMPLATES[problemData.language || \"typescript\"]);\n  const [problem, setProblem] = useState(problemData.problem || \"\");\n\n  const handleProblemChange = (newProblem: string) => {\n    setProblem(newProblem);\n    // リアルタイムでlocalStorageに保存\n    setProblemData({\n      problem: newProblem,\n      code,\n      language,\n      learningTopic: problemData.learningTopic,\n    });\n  };\n\n  const handleCodeChange = (newCode: string | undefined) => {\n    const updatedCode = newCode || \"\";\n    setCode(updatedCode);\n    // リアルタイムでlocalStorageに保存\n    setProblemData({\n      problem,\n      code: updatedCode,\n      language,\n      learningTopic: problemData.learningTopic,\n    });\n  };\n\n  const handleLanguageChange = (newLanguage: string) => {\n    const newCode = DEFAULT_CODE_TEMPLATES[newLanguage] || \"// Write your code here\\n\";\n    setLanguage(newLanguage);\n    setCode(newCode);\n    // リアルタイムでlocalStorageに保存\n    setProblemData({\n      problem,\n      code: newCode,\n      language: newLanguage,\n      learningTopic: problemData.learningTopic,\n    });\n  };\n\n  const handleTransitionToQuiz = () => {\n    setProblemData({\n      problem,\n      code,\n      language,\n      learningTopic: problemData.learningTopic,\n    });\n\n    // Next.jsのルーターで遷移\n    router.push(\"/create-mcq\");\n  };\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        borderLeft: \"1px solid #ddd\",\n      }}\n    >\n      <ProblemInput onProblemChange={handleProblemChange} initialValue={problem} />\n      <div style={{ flex: 1, display: \"flex\", flexDirection: \"column\", minHeight: 0 }}>\n        <div style={{ flex: 1, minHeight: 0, overflow: \"hidden\" }}>\n          <CodeEditor value={code} onChange={handleCodeChange} language={language} onLanguageChange={handleLanguageChange} />\n        </div>\n        <div\n          style={{\n            padding: \"16px\",\n            backgroundColor: \"#f8f9fa\",\n            borderTop: \"1px solid #ddd\",\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            flexShrink: 0,\n            minHeight: \"50px\",\n          }}\n        >\n          <button\n            onClick={handleTransitionToQuiz}\n            style={{\n              padding: \"12px 20px\",\n              backgroundColor: \"#4CAF50\",\n              color: \"white\",\n              border: \"none\",\n              borderRadius: \"6px\",\n              cursor: \"pointer\",\n              fontSize: \"14px\",\n              fontWeight: \"bold\",\n              boxShadow: \"0 2px 4px rgba(0,0,0,0.2)\",\n            }}\n            onMouseOver={(e) => {\n              e.currentTarget.style.backgroundColor = \"#45a049\";\n            }}\n            onMouseOut={(e) => {\n              e.currentTarget.style.backgroundColor = \"#4CAF50\";\n            }}\n          >\n            選択式問題の作成に移る\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;AAEA,MAAM,yBAAiD;IACrD,YAAY;IACZ,YAAY;IACZ,QAAQ;IACR,MAAM;IACN,KAAK;IACL,GAAG;IACH,QAAQ;IACR,IAAI;IACJ,MAAM;IACN,KAAK;IACL,MAAM;IACN,OAAO;IACP,QAAQ;IACR,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,OAAO;AACT;AAEO,MAAM,aAAuB;;IAClC,MAAM,SAAS,IAAA,kJAAS;IACxB,MAAM,EAAE,WAAW,EAAE,cAAc,EAAE,GAAG,IAAA,mJAAU;IAElD,yBAAyB;IACzB,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,yKAAQ,EAAC,YAAY,QAAQ,IAAI;IACjE,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,yKAAQ,EAAC,YAAY,IAAI,IAAI,sBAAsB,CAAC,YAAY,QAAQ,IAAI,aAAa;IACjH,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,yKAAQ,EAAC,YAAY,OAAO,IAAI;IAE9D,MAAM,sBAAsB,CAAC;QAC3B,WAAW;QACX,yBAAyB;QACzB,eAAe;YACb,SAAS;YACT;YACA;YACA,eAAe,YAAY,aAAa;QAC1C;IACF;IAEA,MAAM,mBAAmB,CAAC;QACxB,MAAM,cAAc,WAAW;QAC/B,QAAQ;QACR,yBAAyB;QACzB,eAAe;YACb;YACA,MAAM;YACN;YACA,eAAe,YAAY,aAAa;QAC1C;IACF;IAEA,MAAM,uBAAuB,CAAC;QAC5B,MAAM,UAAU,sBAAsB,CAAC,YAAY,IAAI;QACvD,YAAY;QACZ,QAAQ;QACR,yBAAyB;QACzB,eAAe;YACb;YACA,MAAM;YACN,UAAU;YACV,eAAe,YAAY,aAAa;QAC1C;IACF;IAEA,MAAM,yBAAyB;QAC7B,eAAe;YACb;YACA;YACA;YACA,eAAe,YAAY,aAAa;QAC1C;QAEA,kBAAkB;QAClB,OAAO,IAAI,CAAC;IACd;IAEA,qBACE,6LAAC;QACC,OAAO;YACL,OAAO;YACP,QAAQ;YACR,SAAS;YACT,eAAe;YACf,YAAY;QACd;;0BAEA,6LAAC,qJAAY;gBAAC,iBAAiB;gBAAqB,cAAc;;;;;;0BAClE,6LAAC;gBAAI,OAAO;oBAAE,MAAM;oBAAG,SAAS;oBAAQ,eAAe;oBAAU,WAAW;gBAAE;;kCAC5E,6LAAC;wBAAI,OAAO;4BAAE,MAAM;4BAAG,WAAW;4BAAG,UAAU;wBAAS;kCACtD,cAAA,6LAAC,iJAAU;4BAAC,OAAO;4BAAM,UAAU;4BAAkB,UAAU;4BAAU,kBAAkB;;;;;;;;;;;kCAE7F,6LAAC;wBACC,OAAO;4BACL,SAAS;4BACT,iBAAiB;4BACjB,WAAW;4BACX,SAAS;4BACT,gBAAgB;4BAChB,YAAY;4BACZ,WAAW;wBACb;kCAEA,cAAA,6LAAC;4BACC,SAAS;4BACT,OAAO;gCACL,SAAS;gCACT,iBAAiB;gCACjB,OAAO;gCACP,QAAQ;gCACR,cAAc;gCACd,QAAQ;gCACR,UAAU;gCACV,YAAY;gCACZ,WAAW;4BACb;4BACA,aAAa,CAAC;gCACZ,EAAE,aAAa,CAAC,KAAK,CAAC,eAAe,GAAG;4BAC1C;4BACA,YAAY,CAAC;gCACX,EAAE,aAAa,CAAC,KAAK,CAAC,eAAe,GAAG;4BAC1C;sCACD;;;;;;;;;;;;;;;;;;;;;;;AAOX;GA7Ga;;QACI,kJAAS;QACgB,mJAAU;;;KAFvC","debugId":null}},
    {"offset": {"line": 1144, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/components/LearningTopicSelector.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nexport type LearningTopic = '制御構造' | 'クラス' | string;\n\ninterface LearningTopicSelectorProps {\n  isOpen: boolean;\n  onSelect: (topic: LearningTopic) => void;\n}\n\nexport const LearningTopicSelector: React.FC<LearningTopicSelectorProps> = ({ isOpen, onSelect }) => {\n  const [selectedTopic, setSelectedTopic] = useState<'制御構造' | 'クラス' | 'その他'>('制御構造');\n  const [customTopic, setCustomTopic] = useState('');\n\n  if (!isOpen) return null;\n\n  const handleSubmit = () => {\n    if (selectedTopic === 'その他') {\n      if (customTopic.trim()) {\n        onSelect(customTopic.trim());\n      } else {\n        alert('学習項目を入力してください');\n        return;\n      }\n    } else {\n      onSelect(selectedTopic);\n    }\n  };\n\n  return (\n    <div style={{\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      zIndex: 1000\n    }}>\n      <div style={{\n        backgroundColor: 'white',\n        padding: '32px',\n        borderRadius: '12px',\n        maxWidth: '500px',\n        width: '90%',\n        boxShadow: '0 4px 20px rgba(0, 0, 0, 0.15)'\n      }}>\n        <h2 style={{ \n          marginTop: 0, \n          marginBottom: '24px', \n          textAlign: 'center',\n          color: '#333'\n        }}>\n          学習項目を選択してください\n        </h2>\n        \n        <p style={{ \n          fontSize: '14px', \n          color: '#666', \n          marginBottom: '20px',\n          textAlign: 'center'\n        }}>\n          今回学習したいプログラミングのトピックを選んでください\n        </p>\n        \n        <div style={{ marginBottom: '24px' }}>\n          <label style={{ \n            display: 'block', \n            marginBottom: '12px',\n            cursor: 'pointer',\n            padding: '12px',\n            border: selectedTopic === '制御構造' ? '2px solid #2196f3' : '1px solid #ddd',\n            borderRadius: '8px',\n            backgroundColor: selectedTopic === '制御構造' ? '#f0f8ff' : 'white'\n          }}>\n            <input\n              type=\"radio\"\n              name=\"learningTopic\"\n              value=\"制御構造\"\n              checked={selectedTopic === '制御構造'}\n              onChange={(e) => setSelectedTopic(e.target.value as '制御構造')}\n              style={{ marginRight: '8px' }}\n            />\n            <strong>制御構造</strong>\n            <div style={{ fontSize: '12px', color: '#666', marginTop: '4px', marginLeft: '24px' }}>\n              if文、for文、while文などの条件分岐や繰り返し処理\n            </div>\n          </label>\n          \n          <label style={{ \n            display: 'block', \n            marginBottom: '12px',\n            cursor: 'pointer',\n            padding: '12px',\n            border: selectedTopic === 'クラス' ? '2px solid #2196f3' : '1px solid #ddd',\n            borderRadius: '8px',\n            backgroundColor: selectedTopic === 'クラス' ? '#f0f8ff' : 'white'\n          }}>\n            <input\n              type=\"radio\"\n              name=\"learningTopic\"\n              value=\"クラス\"\n              checked={selectedTopic === 'クラス'}\n              onChange={(e) => setSelectedTopic(e.target.value as 'クラス')}\n              style={{ marginRight: '8px' }}\n            />\n            <strong>クラス</strong>\n            <div style={{ fontSize: '12px', color: '#666', marginTop: '4px', marginLeft: '24px' }}>\n              オブジェクト指向プログラミング、クラスの設計と実装\n            </div>\n          </label>\n          \n          <label style={{ \n            display: 'block', \n            marginBottom: '12px',\n            cursor: 'pointer',\n            padding: '12px',\n            border: selectedTopic === 'その他' ? '2px solid #2196f3' : '1px solid #ddd',\n            borderRadius: '8px',\n            backgroundColor: selectedTopic === 'その他' ? '#f0f8ff' : 'white'\n          }}>\n            <input\n              type=\"radio\"\n              name=\"learningTopic\"\n              value=\"その他\"\n              checked={selectedTopic === 'その他'}\n              onChange={(e) => setSelectedTopic(e.target.value as 'その他')}\n              style={{ marginRight: '8px' }}\n            />\n            <strong>その他</strong>\n            <div style={{ fontSize: '12px', color: '#666', marginTop: '4px', marginLeft: '24px' }}>\n              自由記述で学習したい項目を入力\n            </div>\n          </label>\n\n          {selectedTopic === 'その他' && (\n            <input\n              type=\"text\"\n              value={customTopic}\n              onChange={(e) => setCustomTopic(e.target.value)}\n              placeholder=\"学習したい項目を入力してください（例: 関数、データ構造、アルゴリズム）\"\n              style={{\n                width: '100%',\n                padding: '12px',\n                border: '1px solid #ddd',\n                borderRadius: '4px',\n                fontSize: '14px',\n                marginTop: '12px',\n                boxSizing: 'border-box'\n              }}\n            />\n          )}\n        </div>\n        \n        <div style={{ \n          display: 'flex', \n          justifyContent: 'center'\n        }}>\n          <button\n            onClick={handleSubmit}\n            style={{\n              padding: '12px 32px',\n              border: 'none',\n              borderRadius: '6px',\n              backgroundColor: '#2196f3',\n              color: 'white',\n              cursor: 'pointer',\n              fontSize: '16px',\n              fontWeight: 'bold'\n            }}\n          >\n            決定\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1454, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/app/create-quiz/page.tsx"],"sourcesContent":["\"use client\";\nimport React, { useState, useEffect } from 'react';\nimport { ChatContainer } from '@/components/ChatContainer';\nimport { RightPanel } from '@/components/RightPanel';\nimport { LearningTopicSelector } from '@/components/LearningTopicSelector';\nimport { useProblem } from '@/contexts/ProblemContext';\nimport { chatService } from '@/services/chatService';\nimport type { LearningTopic } from '@/components/LearningTopicSelector';\n\nconst HomePage: React.FC = () => {\n  const { problemData, setLearningTopic } = useProblem();\n  const [showTopicSelector, setShowTopicSelector] = useState(false);\n\n  // ページ初回訪問時に学習項目が未設定の場合のみポップアップを表示\n  useEffect(() => {\n    const hasSelectedTopic = localStorage.getItem('hasSelectedLearningTopic');\n    if (!hasSelectedTopic || !problemData.learningTopic) {\n      setShowTopicSelector(true);\n    }\n  }, [problemData.learningTopic]);\n\n  const handleTopicSelect = (topic: LearningTopic) => {\n    setLearningTopic(topic);\n    chatService.setLearningTopic(topic);\n    localStorage.setItem('hasSelectedLearningTopic', 'true');\n    setShowTopicSelector(false);\n  };\n\n  return (\n    <div style={{ \n      display: 'flex', \n      height: '100vh',\n      width: '100vw',\n      overflow: 'hidden',\n      minHeight: '600px'\n    }}>\n      <div style={{ \n        flex: '1',\n        height: '100vh',\n        minWidth: '300px',\n        maxWidth: '50%'\n      }}>\n        <ChatContainer />\n      </div>\n      <div style={{ \n        flex: '1',\n        height: '100vh',\n        minWidth: '400px',\n        maxWidth: '50%'\n      }}>\n        <RightPanel />\n      </div>\n      \n      <LearningTopicSelector \n        isOpen={showTopicSelector}\n        onSelect={handleTopicSelect}\n      />\n    </div>\n  );\n};\n\nexport default HomePage;"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AANA;;;;;;;AASA,MAAM,WAAqB;;IACzB,MAAM,EAAE,WAAW,EAAE,gBAAgB,EAAE,GAAG,IAAA,mJAAU;IACpD,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,IAAA,yKAAQ,EAAC;IAE3D,kCAAkC;IAClC,IAAA,0KAAS;8BAAC;YACR,MAAM,mBAAmB,aAAa,OAAO,CAAC;YAC9C,IAAI,CAAC,oBAAoB,CAAC,YAAY,aAAa,EAAE;gBACnD,qBAAqB;YACvB;QACF;6BAAG;QAAC,YAAY,aAAa;KAAC;IAE9B,MAAM,oBAAoB,CAAC;QACzB,iBAAiB;QACjB,gJAAW,CAAC,gBAAgB,CAAC;QAC7B,aAAa,OAAO,CAAC,4BAA4B;QACjD,qBAAqB;IACvB;IAEA,qBACE,6LAAC;QAAI,OAAO;YACV,SAAS;YACT,QAAQ;YACR,OAAO;YACP,UAAU;YACV,WAAW;QACb;;0BACE,6LAAC;gBAAI,OAAO;oBACV,MAAM;oBACN,QAAQ;oBACR,UAAU;oBACV,UAAU;gBACZ;0BACE,cAAA,6LAAC,uJAAa;;;;;;;;;;0BAEhB,6LAAC;gBAAI,OAAO;oBACV,MAAM;oBACN,QAAQ;oBACR,UAAU;oBACV,UAAU;gBACZ;0BACE,cAAA,6LAAC,iJAAU;;;;;;;;;;0BAGb,6LAAC,uKAAqB;gBACpB,QAAQ;gBACR,UAAU;;;;;;;;;;;;AAIlB;GAlDM;;QACsC,mJAAU;;;KADhD;uCAoDS","debugId":null}}]
}