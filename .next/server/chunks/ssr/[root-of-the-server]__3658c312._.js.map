{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/components/CreationModeSelector.tsx"],"sourcesContent":["import React from 'react';\n\nexport type CreationMode = 'auto' | 'manual';\n\ninterface CreationModeSelectorProps {\n  value: CreationMode;\n  onChange: (mode: CreationMode) => void;\n  onModeChangeRequest?: (newMode: CreationMode) => void;\n  disabled?: boolean;\n}\n\nexport const CreationModeSelector: React.FC<CreationModeSelectorProps> = ({ value, onChange, onModeChangeRequest, disabled = false }) => {\n  const handleModeChange = (newMode: CreationMode) => {\n    if (disabled || newMode === value) {\n      return;\n    }\n    \n    if (onModeChangeRequest) {\n      onModeChangeRequest(newMode);\n    } else {\n      onChange(newMode);\n    }\n  };\n  return (\n    <div style={{ marginBottom: '20px' }}>\n      <label style={{ \n        display: 'block', \n        fontWeight: 'bold', \n        marginBottom: '12px',\n        fontSize: '14px'\n      }}>\n        作成モード\n      </label>\n      <div style={{ \n        display: 'flex', \n        flexDirection: 'row', \n        gap: '12px',\n        opacity: disabled ? 0.6 : 1\n      }}>\n        <label style={{\n          display: 'block',\n          cursor: disabled ? 'not-allowed' : 'pointer',\n          border: value === 'auto' ? '2px solid #4CAF50' : '2px solid #e0e0e0',\n          borderRadius: '8px',\n          padding: '12px 16px',\n          backgroundColor: value === 'auto' ? '#f8fff8' : 'white',\n          transition: 'all 0.2s ease-in-out',\n          flex: '1',\n          minWidth: '0'\n        }}>\n          <div style={{ display: 'flex', alignItems: 'flex-start' }}>\n            <input\n              type=\"radio\"\n              name=\"creationMode\"\n              value=\"auto\"\n              checked={value === 'auto'}\n              onChange={() => handleModeChange('auto')}\n              disabled={disabled}\n              style={{ \n                marginRight: '12px',\n                marginTop: '2px',\n                cursor: disabled ? 'not-allowed' : 'pointer',\n                transform: 'scale(1.2)'\n              }}\n            />\n            <div style={{ flex: 1 }}>\n              <div style={{ \n                fontSize: '15px',\n                fontWeight: '600',\n                color: value === 'auto' ? '#2e7d32' : '#333',\n                marginBottom: '4px'\n              }}>\n                🤖 自動生成\n              </div>\n              <div style={{ \n                fontSize: '13px', \n                color: disabled ? '#999' : '#666',\n                lineHeight: '1.4'\n              }}>\n                AIが学習項目に基づいて穴埋め箇所と選択肢を自動生成\n              </div>\n            </div>\n          </div>\n        </label>\n        \n        <label style={{\n          display: 'block',\n          cursor: disabled ? 'not-allowed' : 'pointer',\n          border: value === 'manual' ? '2px solid #4CAF50' : '2px solid #e0e0e0',\n          borderRadius: '8px',\n          padding: '12px 16px',\n          backgroundColor: value === 'manual' ? '#f8fff8' : 'white',\n          transition: 'all 0.2s ease-in-out',\n          flex: '1',\n          minWidth: '0'\n        }}>\n          <div style={{ display: 'flex', alignItems: 'flex-start' }}>\n            <input\n              type=\"radio\"\n              name=\"creationMode\"\n              value=\"manual\"\n              checked={value === 'manual'}\n              onChange={() => handleModeChange('manual')}\n              disabled={disabled}\n              style={{ \n                marginRight: '12px',\n                marginTop: '2px',\n                cursor: disabled ? 'not-allowed' : 'pointer',\n                transform: 'scale(1.2)'\n              }}\n            />\n            <div style={{ flex: 1 }}>\n              <div style={{ \n                fontSize: '15px',\n                fontWeight: '600',\n                color: value === 'manual' ? '#2e7d32' : '#333',\n                marginBottom: '4px'\n              }}>\n                ✏️ 手動作成\n              </div>\n              <div style={{ \n                fontSize: '13px', \n                color: disabled ? '#999' : '#666',\n                lineHeight: '1.4'\n              }}>\n                穴埋め箇所を手動で選択し、選択肢を自分で作成\n              </div>\n            </div>\n          </div>\n        </label>\n      </div>\n    </div>\n  );\n};"],"names":[],"mappings":";;;;;;AAWO,MAAM,uBAA4D,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,mBAAmB,EAAE,WAAW,KAAK,EAAE;IAClI,MAAM,mBAAmB,CAAC;QACxB,IAAI,YAAY,YAAY,OAAO;YACjC;QACF;QAEA,IAAI,qBAAqB;YACvB,oBAAoB;QACtB,OAAO;YACL,SAAS;QACX;IACF;IACA,qBACE,8OAAC;QAAI,OAAO;YAAE,cAAc;QAAO;;0BACjC,8OAAC;gBAAM,OAAO;oBACZ,SAAS;oBACT,YAAY;oBACZ,cAAc;oBACd,UAAU;gBACZ;0BAAG;;;;;;0BAGH,8OAAC;gBAAI,OAAO;oBACV,SAAS;oBACT,eAAe;oBACf,KAAK;oBACL,SAAS,WAAW,MAAM;gBAC5B;;kCACE,8OAAC;wBAAM,OAAO;4BACZ,SAAS;4BACT,QAAQ,WAAW,gBAAgB;4BACnC,QAAQ,UAAU,SAAS,sBAAsB;4BACjD,cAAc;4BACd,SAAS;4BACT,iBAAiB,UAAU,SAAS,YAAY;4BAChD,YAAY;4BACZ,MAAM;4BACN,UAAU;wBACZ;kCACE,cAAA,8OAAC;4BAAI,OAAO;gCAAE,SAAS;gCAAQ,YAAY;4BAAa;;8CACtD,8OAAC;oCACC,MAAK;oCACL,MAAK;oCACL,OAAM;oCACN,SAAS,UAAU;oCACnB,UAAU,IAAM,iBAAiB;oCACjC,UAAU;oCACV,OAAO;wCACL,aAAa;wCACb,WAAW;wCACX,QAAQ,WAAW,gBAAgB;wCACnC,WAAW;oCACb;;;;;;8CAEF,8OAAC;oCAAI,OAAO;wCAAE,MAAM;oCAAE;;sDACpB,8OAAC;4CAAI,OAAO;gDACV,UAAU;gDACV,YAAY;gDACZ,OAAO,UAAU,SAAS,YAAY;gDACtC,cAAc;4CAChB;sDAAG;;;;;;sDAGH,8OAAC;4CAAI,OAAO;gDACV,UAAU;gDACV,OAAO,WAAW,SAAS;gDAC3B,YAAY;4CACd;sDAAG;;;;;;;;;;;;;;;;;;;;;;;kCAOT,8OAAC;wBAAM,OAAO;4BACZ,SAAS;4BACT,QAAQ,WAAW,gBAAgB;4BACnC,QAAQ,UAAU,WAAW,sBAAsB;4BACnD,cAAc;4BACd,SAAS;4BACT,iBAAiB,UAAU,WAAW,YAAY;4BAClD,YAAY;4BACZ,MAAM;4BACN,UAAU;wBACZ;kCACE,cAAA,8OAAC;4BAAI,OAAO;gCAAE,SAAS;gCAAQ,YAAY;4BAAa;;8CACtD,8OAAC;oCACC,MAAK;oCACL,MAAK;oCACL,OAAM;oCACN,SAAS,UAAU;oCACnB,UAAU,IAAM,iBAAiB;oCACjC,UAAU;oCACV,OAAO;wCACL,aAAa;wCACb,WAAW;wCACX,QAAQ,WAAW,gBAAgB;wCACnC,WAAW;oCACb;;;;;;8CAEF,8OAAC;oCAAI,OAAO;wCAAE,MAAM;oCAAE;;sDACpB,8OAAC;4CAAI,OAAO;gDACV,UAAU;gDACV,YAAY;gDACZ,OAAO,UAAU,WAAW,YAAY;gDACxC,cAAc;4CAChB;sDAAG;;;;;;sDAGH,8OAAC;4CAAI,OAAO;gDACV,UAAU;gDACV,OAAO,WAAW,SAAS;gDAC3B,YAAY;4CACd;sDAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASjB","debugId":null}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/services/quizGenerationService.ts"],"sourcesContent":["import { ChatOpenAI } from \"@langchain/openai\";\nimport { HumanMessage, SystemMessage } from \"@langchain/core/messages\";\nimport type { AutoGenerationRequest, AutoGenerationResponse } from \"../types/quiz\";\n\nconst OPENAI_API_KEY = process.env.NEXT_PUBLIC_OPENAI_API_KEY;\n\nclass QuizGenerationService {\n  private model: ChatOpenAI;\n\n  constructor() {\n    if (!OPENAI_API_KEY) {\n      throw new Error(\"OpenAI API key is required. Please set VITE_OPENAI_API_KEY in your environment variables.\");\n    }\n\n    this.model = new ChatOpenAI({\n      apiKey: OPENAI_API_KEY,\n      model: \"gpt-4o\",\n      temperature: 0, // より一貫した結果のために低く設定\n    });\n  }\n\n  async generateQuiz(request: AutoGenerationRequest): Promise<AutoGenerationResponse> {\n    const systemPrompt = `\n    あなたは教育用選択式問題作成の専門家です。与えられた問題文、コード、学習項目(${request.learningTopic})から、学習者の理解が深まるような選択式問題を作成してください。\n\n    # 指示\n    1. ${request.learningTopic}に関連する最も重要な箇所を1つ選んで「__BLANK__」にする\n    2. __BLANK__は**必ずソースコード中から選び**、決してソースコードを追加して__BLANK__にしたりコメントアウト(// の部分)の部分を__BLANK__にしたりしない\n    3. __BLANK__は最大でソースコード1行とし、なるべく短くする\n    4. **正解は絶対に1つのみ（__BLANK__としたソースコードをそのまま出力）**とし、B、C、Dには明らかな誤答を出力する\n    5. 誤答は言語の文法ではなく、学習項目に関連するものとし、学習者が学びのある素晴らしいものにする。\n    6. JSONフォーマットで回答する\n\n    # 出力フォーマット\n    {\n      \"problemText\": \"元の問題文を保持し、末尾に「___BLANK___の部分に当てはまる適切な選択肢を選べ。」を追加した問題文\",\n      \"codeWithBlanks\": \"ソースコードの一部を___BLANK___に置き換え、そのほかは変更していないコード\",\n      \"choices\": [\n        {\"id\": \"A\", \"text\": \"選択肢A\", \"isCorrect\": true},\n        {\"id\": \"B\", \"text\": \"選択肢B\", \"isCorrect\": false},\n        {\"id\": \"C\", \"text\": \"選択肢C\", \"isCorrect\": false},\n        {\"id\": \"D\", \"text\": \"選択肢D\", \"isCorrect\": false}\n      ],\n      \"correctChoiceId\": \"A\"\n    }\n    `;\n\n    const userPrompt = `\n    # 問題文\n    ${request.problemText}\n\n    # ソースコード (${request.language})\n    \\`\\`\\`\n    ${request.code}\n    \\`\\`\\`\n\n    # 学習項目\n    ${request.learningTopic}\n    `;\n\n    try {\n      const messages = [new SystemMessage(systemPrompt), new HumanMessage(userPrompt)];\n\n      const response = await this.model.invoke(messages);\n      const responseText = response.content as string;\n\n      // JSON部分を抽出\n      const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n      if (!jsonMatch) {\n        throw new Error(\"AIの応答からJSONを抽出できませんでした\");\n      }\n\n      const parsedResponse = JSON.parse(jsonMatch[0]) as AutoGenerationResponse;\n\n      // バリデーション\n      if (!parsedResponse.codeWithBlanks.includes(\"___BLANK___\")) {\n        throw new Error(\"空欄箇所が正しく設定されていません\");\n      }\n\n      if (!parsedResponse.choices || parsedResponse.choices.length !== 4) {\n        throw new Error(\"選択肢は4つである必要があります\");\n      }\n\n      const correctChoices = parsedResponse.choices.filter((choice) => choice.isCorrect);\n      if (correctChoices.length !== 1) {\n        throw new Error(\"正答は1つである必要があります\");\n      }\n\n      return parsedResponse;\n    } catch (error) {\n      console.error(\"Quiz generation error:\", error);\n      throw new Error(`問題の自動生成に失敗しました: ${error}`);\n    }\n  }\n}\n\nexport const quizGenerationService = new QuizGenerationService();\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAAA;AAAA;;;AAGA,MAAM;AAEN,MAAM;IACI,MAAkB;IAE1B,aAAc;QACZ;;QAIA,IAAI,CAAC,KAAK,GAAG,IAAI,0KAAU,CAAC;YAC1B,QAAQ;YACR,OAAO;YACP,aAAa;QACf;IACF;IAEA,MAAM,aAAa,OAA8B,EAAmC;QAClF,MAAM,eAAe,CAAC;2CACiB,EAAE,QAAQ,aAAa,CAAC;;;OAG5D,EAAE,QAAQ,aAAa,CAAC;;;;;;;;;;;;;;;;;;;IAmB3B,CAAC;QAED,MAAM,aAAa,CAAC;;IAEpB,EAAE,QAAQ,WAAW,CAAC;;cAEZ,EAAE,QAAQ,QAAQ,CAAC;;IAE7B,EAAE,QAAQ,IAAI,CAAC;;;;IAIf,EAAE,QAAQ,aAAa,CAAC;IACxB,CAAC;QAED,IAAI;YACF,MAAM,WAAW;gBAAC,IAAI,kLAAa,CAAC;gBAAe,IAAI,gLAAY,CAAC;aAAY;YAEhF,MAAM,WAAW,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;YACzC,MAAM,eAAe,SAAS,OAAO;YAErC,YAAY;YACZ,MAAM,YAAY,aAAa,KAAK,CAAC;YACrC,IAAI,CAAC,WAAW;gBACd,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,iBAAiB,KAAK,KAAK,CAAC,SAAS,CAAC,EAAE;YAE9C,UAAU;YACV,IAAI,CAAC,eAAe,cAAc,CAAC,QAAQ,CAAC,gBAAgB;gBAC1D,MAAM,IAAI,MAAM;YAClB;YAEA,IAAI,CAAC,eAAe,OAAO,IAAI,eAAe,OAAO,CAAC,MAAM,KAAK,GAAG;gBAClE,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,iBAAiB,eAAe,OAAO,CAAC,MAAM,CAAC,CAAC,SAAW,OAAO,SAAS;YACjF,IAAI,eAAe,MAAM,KAAK,GAAG;gBAC/B,MAAM,IAAI,MAAM;YAClB;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,MAAM,IAAI,MAAM,CAAC,gBAAgB,EAAE,OAAO;QAC5C;IACF;AACF;AAEO,MAAM,wBAAwB,IAAI","debugId":null}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/components/AutoGenerationMode.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Editor from '@monaco-editor/react';\nimport { useProblem } from '../contexts/ProblemContext';\nimport { quizGenerationService } from '../services/quizGenerationService';\nimport type { AutoGenerationResponse, QuizChoice } from '../types/quiz';\n\ninterface AutoGenerationModeProps {\n  learningTopic: string;\n  onQuizGenerated: (quiz: AutoGenerationResponse) => void;\n  onGeneratingStateChange?: (isGenerating: boolean) => void;\n}\n\nexport const AutoGenerationMode: React.FC<AutoGenerationModeProps> = ({ \n  learningTopic, \n  onQuizGenerated,\n  onGeneratingStateChange\n}) => {\n  const { problemData } = useProblem();\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  // 生成中状態の変更を親に通知\n  const updateGeneratingState = (generating: boolean) => {\n    setIsGenerating(generating);\n    if (onGeneratingStateChange) {\n      onGeneratingStateChange(generating);\n    }\n  };\n  const [generatedQuiz, setGeneratedQuiz] = useState<AutoGenerationResponse | null>(null);\n  const [error, setError] = useState<string>('');\n\n  const handleGenerate = async () => {\n    if (!learningTopic.trim()) {\n      setError('学習項目を入力してください');\n      return;\n    }\n\n    if (!problemData.problem.trim() || !problemData.code.trim()) {\n      setError('問題文とコードが必要です');\n      return;\n    }\n\n    updateGeneratingState(true);\n    setError('');\n\n    try {\n      const response = await quizGenerationService.generateQuiz({\n        problemText: problemData.problem,\n        code: problemData.code,\n        language: problemData.language,\n        learningTopic: learningTopic\n      });\n\n      // 解説を空にして渡す\n      const responseWithoutExplanation = { ...response, explanation: '' };\n      setGeneratedQuiz(responseWithoutExplanation);\n      onQuizGenerated(responseWithoutExplanation);\n    } catch (error) {\n      setError(error instanceof Error ? error.message : '問題の生成に失敗しました');\n    } finally {\n      updateGeneratingState(false);\n    }\n  };\n\n  const getChoiceStyle = (choice: QuizChoice) => ({\n    padding: '10px',\n    margin: '5px 0',\n    border: choice.isCorrect ? '2px solid #4CAF50' : '1px solid #ddd',\n    borderRadius: '4px',\n    backgroundColor: choice.isCorrect ? '#f0f8f0' : 'white',\n    fontSize: '14px'\n  });\n\n  return (\n    <div>\n      <div style={{ marginBottom: '20px' }}>\n        <button\n          onClick={handleGenerate}\n          disabled={isGenerating}\n          style={{\n            padding: '12px 24px',\n            backgroundColor: isGenerating ? '#ccc' : '#2196f3',\n            color: 'white',\n            border: 'none',\n            borderRadius: '6px',\n            cursor: isGenerating ? 'not-allowed' : 'pointer',\n            fontSize: '14px',\n            fontWeight: 'bold'\n          }}\n        >\n          {isGenerating ? '生成中...' : 'AI で問題を自動生成'}\n        </button>\n      </div>\n\n      {error && (\n        <div style={{\n          padding: '12px',\n          backgroundColor: '#ffebee',\n          border: '1px solid #f44336',\n          borderRadius: '4px',\n          color: '#d32f2f',\n          marginBottom: '20px',\n          fontSize: '14px'\n        }}>\n          {error}\n        </div>\n      )}\n\n      {generatedQuiz && (\n        <div>\n          <h3 style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '16px' }}>\n            生成された問題\n          </h3>\n\n          {/* 問題文 */}\n          <div style={{ marginBottom: '20px' }}>\n            <h4 style={{ fontSize: '14px', fontWeight: 'bold', marginBottom: '8px' }}>\n              問題文\n            </h4>\n            <div style={{\n              padding: '12px',\n              backgroundColor: 'white',\n              border: '1px solid #ddd',\n              borderRadius: '4px',\n              fontSize: '14px',\n              lineHeight: '1.6',\n              whiteSpace: 'pre-wrap'\n            }}>\n              {generatedQuiz.problemText}\n            </div>\n          </div>\n\n          {/* 穴埋めコード、選択肢、解説 */}\n          <div style={{ \n            display: 'flex',\n            gap: '20px',\n            marginBottom: '20px'\n          }}>\n            {/* 左側: 穴埋めコード */}\n            <div style={{ flex: 1 }}>\n              <h4 style={{ fontSize: '14px', fontWeight: 'bold', marginBottom: '8px' }}>\n                穴埋めコード\n              </h4>\n              <div style={{ height: '600px', border: '1px solid #ddd', borderRadius: '4px' }}>\n                <Editor\n                  height=\"100%\"\n                  language={problemData.language}\n                  value={generatedQuiz.codeWithBlanks}\n                  onMount={(editor, monaco) => {\n                    // ___BLANK___をハイライト表示するためのデコレーションを追加\n                    const model = editor.getModel();\n                    if (model) {\n                      const text = model.getValue();\n                      const decorations = [];\n                      const regex = /___BLANK___/g;\n                      let match;\n                      \n                      while ((match = regex.exec(text)) !== null) {\n                        const startPos = model.getPositionAt(match.index);\n                        const endPos = model.getPositionAt(match.index + match[0].length);\n                        \n                        decorations.push({\n                          range: new monaco.Range(\n                            startPos.lineNumber,\n                            startPos.column,\n                            endPos.lineNumber,\n                            endPos.column\n                          ),\n                          options: {\n                            inlineClassName: 'my-blank-highlight'\n                          }\n                        });\n                      }\n                      \n                      editor.deltaDecorations([], decorations);\n                    }\n                  }}\n                  options={{\n                    readOnly: true,\n                    minimap: { enabled: false },\n                    fontSize: 14,\n                    lineNumbers: 'on',\n                    wordWrap: 'on',\n                    scrollBeyondLastLine: false,\n                    automaticLayout: true,\n                  }}\n                  theme=\"vs-light\"\n                />\n              </div>\n            </div>\n\n            {/* 右側: 選択肢と解説 */}\n            <div style={{ \n              flex: 1,\n              display: 'flex',\n              flexDirection: 'column',\n              height: '600px'\n            }}>\n              {/* 右上: 選択肢 */}\n              <div style={{ flex: 1, marginBottom: '8px' }}>\n                <h4 style={{ fontSize: '14px', fontWeight: 'bold', marginBottom: '8px' }}>\n                  選択肢\n                </h4>\n                <div style={{ \n                  // border: '1px solid #ddd', \n                  borderRadius: '4px',\n                  padding: '8px',\n                  backgroundColor: '#fafafa',\n                  height: '200px',\n                  overflow: 'auto'\n                }}>\n                  {generatedQuiz.choices.map((choice) => (\n                    <div key={choice.id} style={getChoiceStyle(choice)}>\n                      <strong>{choice.id}.</strong> {choice.text}\n                      {choice.isCorrect && (\n                        <span style={{ color: '#4CAF50', marginLeft: '8px' }}>✓ 正答</span>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* 右下: 解説入力 */}\n              <div style={{ flex: 1 }}>\n                <h4 style={{ fontSize: '14px', fontWeight: 'bold', marginBottom: '8px' }}>\n                  解説\n                </h4>\n                <textarea\n                  placeholder=\"問題の解説を入力してください...\"\n                  style={{\n                    width: '96%',\n                    height: '280px',\n                    padding: '12px',\n                    border: '1px solid #ddd',\n                    borderRadius: '4px',\n                    fontSize: '14px',\n                    lineHeight: '1.6',\n                    resize: 'none',\n                    fontFamily: 'inherit'\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n\n        </div>\n      )}\n    </div>\n  );\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 745, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/components/ManualCreationMode.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type { QuizChoice } from '../types/quiz';\n\ninterface ManualCreationModeProps {\n  learningTopic: string;\n  onManualDataChange?: (hasData: boolean) => void;\n}\n\nexport const ManualCreationMode: React.FC<ManualCreationModeProps> = ({ onManualDataChange }) => {\n  const [choices, setChoices] = useState<QuizChoice[]>([\n    { id: 'A', text: '', isCorrect: true },\n    { id: 'B', text: '', isCorrect: false },\n    { id: 'C', text: '', isCorrect: false },\n    { id: 'D', text: '', isCorrect: false }\n  ]);\n\n\n  const handleChoiceChange = (index: number, text: string) => {\n    const updatedChoices = [...choices];\n    updatedChoices[index].text = text;\n    setChoices(updatedChoices);\n  };\n\n  // 編集内容の変更を親に通知\n  useEffect(() => {\n    if (onManualDataChange) {\n      const hasChoiceChanges = choices.some(choice => choice.text.trim() !== '');\n      onManualDataChange(hasChoiceChanges);\n    }\n  }, [choices, onManualDataChange]);\n\n  return (\n    <div style={{ \n      display: 'flex',\n      gap: '20px',\n      marginBottom: '20px'\n    }}>\n      {/* 選択肢入力 */}\n      <div style={{ flex: 1 }}>\n        <h4 style={{ \n          fontSize: '14px', \n          fontWeight: 'bold', \n          marginBottom: '12px' \n        }}>\n          選択肢を入力してください\n        </h4>\n        {choices.map((choice, index) => (\n          <div key={choice.id} style={{ marginBottom: '10px' }}>\n            <label style={{ \n              display: 'flex', \n              alignItems: 'center',\n              fontSize: '14px'\n            }}>\n              <span style={{ \n                minWidth: '30px',\n                fontWeight: 'bold'\n              }}>\n                {choice.id}.\n              </span>\n              <input\n                type=\"text\"\n                value={choice.text}\n                onChange={(e) => handleChoiceChange(index, e.target.value)}\n                placeholder={index === 0 ? '正答を入力' : '誤答を入力'}\n                style={{\n                  flex: 1,\n                  padding: '8px',\n                  border: choice.isCorrect ? '2px solid #4CAF50' : '1px solid #ddd',\n                  borderRadius: '4px',\n                  backgroundColor: choice.isCorrect ? '#f0f8f0' : 'white',\n                  fontSize: '14px'\n                }}\n              />\n              {choice.isCorrect && (\n                <span style={{ color: '#4CAF50', marginLeft: '8px' }}>✓ 正答</span>\n              )}\n            </label>\n          </div>\n        ))}\n      </div>\n\n      {/* 解説入力 */}\n      <div style={{ flex: 1 }}>\n        <h4 style={{ \n          fontSize: '14px', \n          fontWeight: 'bold', \n          marginBottom: '12px' \n        }}>\n          解説\n        </h4>\n        <textarea\n          placeholder=\"問題の解説を入力してください...\"\n          style={{\n            width: '100%',\n            height: '200px',\n            padding: '12px',\n            border: '1px solid #ddd',\n            borderRadius: '4px',\n            fontSize: '14px',\n            lineHeight: '1.6',\n            resize: 'vertical',\n            fontFamily: 'inherit'\n          }}\n        />\n      </div>\n    </div>\n  );\n};"],"names":[],"mappings":";;;;;AAAA;;;AAQO,MAAM,qBAAwD,CAAC,EAAE,kBAAkB,EAAE;IAC1F,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,iNAAQ,EAAe;QACnD;YAAE,IAAI;YAAK,MAAM;YAAI,WAAW;QAAK;QACrC;YAAE,IAAI;YAAK,MAAM;YAAI,WAAW;QAAM;QACtC;YAAE,IAAI;YAAK,MAAM;YAAI,WAAW;QAAM;QACtC;YAAE,IAAI;YAAK,MAAM;YAAI,WAAW;QAAM;KACvC;IAGD,MAAM,qBAAqB,CAAC,OAAe;QACzC,MAAM,iBAAiB;eAAI;SAAQ;QACnC,cAAc,CAAC,MAAM,CAAC,IAAI,GAAG;QAC7B,WAAW;IACb;IAEA,eAAe;IACf,IAAA,kNAAS,EAAC;QACR,IAAI,oBAAoB;YACtB,MAAM,mBAAmB,QAAQ,IAAI,CAAC,CAAA,SAAU,OAAO,IAAI,CAAC,IAAI,OAAO;YACvE,mBAAmB;QACrB;IACF,GAAG;QAAC;QAAS;KAAmB;IAEhC,qBACE,8OAAC;QAAI,OAAO;YACV,SAAS;YACT,KAAK;YACL,cAAc;QAChB;;0BAEE,8OAAC;gBAAI,OAAO;oBAAE,MAAM;gBAAE;;kCACpB,8OAAC;wBAAG,OAAO;4BACT,UAAU;4BACV,YAAY;4BACZ,cAAc;wBAChB;kCAAG;;;;;;oBAGF,QAAQ,GAAG,CAAC,CAAC,QAAQ,sBACpB,8OAAC;4BAAoB,OAAO;gCAAE,cAAc;4BAAO;sCACjD,cAAA,8OAAC;gCAAM,OAAO;oCACZ,SAAS;oCACT,YAAY;oCACZ,UAAU;gCACZ;;kDACE,8OAAC;wCAAK,OAAO;4CACX,UAAU;4CACV,YAAY;wCACd;;4CACG,OAAO,EAAE;4CAAC;;;;;;;kDAEb,8OAAC;wCACC,MAAK;wCACL,OAAO,OAAO,IAAI;wCAClB,UAAU,CAAC,IAAM,mBAAmB,OAAO,EAAE,MAAM,CAAC,KAAK;wCACzD,aAAa,UAAU,IAAI,UAAU;wCACrC,OAAO;4CACL,MAAM;4CACN,SAAS;4CACT,QAAQ,OAAO,SAAS,GAAG,sBAAsB;4CACjD,cAAc;4CACd,iBAAiB,OAAO,SAAS,GAAG,YAAY;4CAChD,UAAU;wCACZ;;;;;;oCAED,OAAO,SAAS,kBACf,8OAAC;wCAAK,OAAO;4CAAE,OAAO;4CAAW,YAAY;wCAAM;kDAAG;;;;;;;;;;;;2BA3BlD,OAAO,EAAE;;;;;;;;;;;0BAmCvB,8OAAC;gBAAI,OAAO;oBAAE,MAAM;gBAAE;;kCACpB,8OAAC;wBAAG,OAAO;4BACT,UAAU;4BACV,YAAY;4BACZ,cAAc;wBAChB;kCAAG;;;;;;kCAGH,8OAAC;wBACC,aAAY;wBACZ,OAAO;4BACL,OAAO;4BACP,QAAQ;4BACR,SAAS;4BACT,QAAQ;4BACR,cAAc;4BACd,UAAU;4BACV,YAAY;4BACZ,QAAQ;4BACR,YAAY;wBACd;;;;;;;;;;;;;;;;;;AAKV","debugId":null}},
    {"offset": {"line": 1003, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/components/MessageItem.tsx"],"sourcesContent":["import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport rehypeHighlight from 'rehype-highlight';\nimport type { Message } from '../types/chat';\n\ninterface MessageItemProps {\n  message: Message;\n}\n\nexport const MessageItem: React.FC<MessageItemProps> = ({ message }) => {\n  const isUser = message.sender === 'user';\n\n  return (\n    <div style={{ \n      display: 'flex', \n      justifyContent: isUser ? 'flex-end' : 'flex-start', \n      marginBottom: '16px' \n    }}>\n      <div style={{ \n        backgroundColor: isUser ? '#2196f3' : '#e3f2fd', \n        color: isUser ? 'white' : '#333',\n        padding: '12px 16px', \n        borderRadius: '18px',\n        maxWidth: '70%',\n        wordBreak: 'break-word'\n      }}>\n        <div className=\"message-content\" style={isUser ? {\n          whiteSpace: 'pre-wrap',\n          fontFamily: 'ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace',\n          fontSize: '13px',\n          lineHeight: '1.4'\n        } : undefined}>\n          {isUser ? (\n            message.content\n          ) : (\n            <ReactMarkdown \n              remarkPlugins={[remarkGfm]}\n              rehypePlugins={[rehypeHighlight]}\n            >\n              {message.content}\n            </ReactMarkdown>\n          )}\n        </div>\n        <div style={{ \n          fontSize: '12px', \n          opacity: 0.7, \n          marginTop: '4px',\n          textAlign: 'right'\n        }}>\n          {message.timestamp.toLocaleTimeString()}\n        </div>\n      </div>\n    </div>\n  );\n};"],"names":[],"mappings":";;;;;AACA;AACA;AACA;;;;;AAOO,MAAM,cAA0C,CAAC,EAAE,OAAO,EAAE;IACjE,MAAM,SAAS,QAAQ,MAAM,KAAK;IAElC,qBACE,8OAAC;QAAI,OAAO;YACV,SAAS;YACT,gBAAgB,SAAS,aAAa;YACtC,cAAc;QAChB;kBACE,cAAA,8OAAC;YAAI,OAAO;gBACV,iBAAiB,SAAS,YAAY;gBACtC,OAAO,SAAS,UAAU;gBAC1B,SAAS;gBACT,cAAc;gBACd,UAAU;gBACV,WAAW;YACb;;8BACE,8OAAC;oBAAI,WAAU;oBAAkB,OAAO,SAAS;wBAC/C,YAAY;wBACZ,YAAY;wBACZ,UAAU;wBACV,YAAY;oBACd,IAAI;8BACD,SACC,QAAQ,OAAO,iBAEf,8OAAC,mMAAa;wBACZ,eAAe;4BAAC,wJAAS;yBAAC;wBAC1B,eAAe;4BAAC,8JAAe;yBAAC;kCAE/B,QAAQ,OAAO;;;;;;;;;;;8BAItB,8OAAC;oBAAI,OAAO;wBACV,UAAU;wBACV,SAAS;wBACT,WAAW;wBACX,WAAW;oBACb;8BACG,QAAQ,SAAS,CAAC,kBAAkB;;;;;;;;;;;;;;;;;AAK/C","debugId":null}},
    {"offset": {"line": 1088, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/components/MessageList.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport type { Message } from '../types/chat';\nimport { MessageItem } from './MessageItem';\n\ninterface MessageListProps {\n  messages: Message[];\n  isLoading: boolean;\n}\n\nexport const MessageList: React.FC<MessageListProps> = ({ messages, isLoading }) => {\n  const bottomRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    bottomRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  return (\n    <div style={{ \n      flex: 1, \n      padding: '16px', \n      overflowY: 'auto',\n      backgroundColor: '#fafafa'\n    }}>\n      {messages.length === 0 && (\n        <div style={{ \n          textAlign: 'center', \n          color: '#666', \n          marginTop: '50px' \n        }}>\n          Start a conversation with the AI chatbot!\n        </div>\n      )}\n      \n      {messages.map((message) => (\n        <MessageItem key={message.id} message={message} />\n      ))}\n      \n      {isLoading && (\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'flex-start', \n          marginBottom: '16px' \n        }}>\n          <div style={{ \n            backgroundColor: '#e3f2fd', \n            padding: '12px 16px', \n            borderRadius: '18px',\n            maxWidth: '70%',\n            color: '#666'\n          }}>\n            Thinking...\n          </div>\n        </div>\n      )}\n      \n      <div ref={bottomRef} />\n    </div>\n  );\n};"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAOO,MAAM,cAA0C,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE;IAC7E,MAAM,YAAY,IAAA,+MAAM,EAAiB;IAEzC,IAAA,kNAAS,EAAC;QACR,UAAU,OAAO,EAAE,eAAe;YAAE,UAAU;QAAS;IACzD,GAAG;QAAC;KAAS;IAEb,qBACE,8OAAC;QAAI,OAAO;YACV,MAAM;YACN,SAAS;YACT,WAAW;YACX,iBAAiB;QACnB;;YACG,SAAS,MAAM,KAAK,mBACnB,8OAAC;gBAAI,OAAO;oBACV,WAAW;oBACX,OAAO;oBACP,WAAW;gBACb;0BAAG;;;;;;YAKJ,SAAS,GAAG,CAAC,CAAC,wBACb,8OAAC,gJAAW;oBAAkB,SAAS;mBAArB,QAAQ,EAAE;;;;;YAG7B,2BACC,8OAAC;gBAAI,OAAO;oBACV,SAAS;oBACT,gBAAgB;oBAChB,cAAc;gBAChB;0BACE,cAAA,8OAAC;oBAAI,OAAO;wBACV,iBAAiB;wBACjB,SAAS;wBACT,cAAc;wBACd,UAAU;wBACV,OAAO;oBACT;8BAAG;;;;;;;;;;;0BAMP,8OAAC;gBAAI,KAAK;;;;;;;;;;;;AAGhB","debugId":null}},
    {"offset": {"line": 1177, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/components/MessageInput.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport type { KeyboardEvent } from \"react\";\n\ninterface MessageInputProps {\n  onSendMessage: (message: string) => void;\n  isLoading: boolean;\n}\n\nexport const MessageInput: React.FC<MessageInputProps> = ({ onSendMessage, isLoading }) => {\n  const [message, setMessage] = useState(\"\");\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleSend = () => {\n    if (message.trim() && !isLoading) {\n      onSendMessage(message.trim());\n      setMessage(\"\");\n      // テキストエリアの高さをリセット\n      if (textareaRef.current) {\n        textareaRef.current.style.height = \"auto\";\n      }\n    }\n  };\n\n  // テキストエリアの高さを自動調整\n  const adjustTextareaHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = \"auto\";\n      textareaRef.current.style.height = Math.min(textareaRef.current.scrollHeight, 120) + \"px\";\n    }\n  };\n\n  useEffect(() => {\n    adjustTextareaHeight();\n  }, [message]);\n\n  const handleKeyPress = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.key === \"Enter\" && !event.shiftKey) {\n      event.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <div\n      style={{\n        padding: \"16px\",\n        borderTop: \"1px solid #ddd\",\n        backgroundColor: \"white\",\n      }}\n    >\n      <div style={{ display: \"flex\", gap: \"8px\", alignItems: \"flex-end\" }}>\n        <textarea\n          ref={textareaRef}\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Type your message here... (Shift+Enter for new line)\"\n          disabled={isLoading}\n          rows={1}\n          style={{\n            flex: 1,\n            padding: \"5px\",\n            border: \"1px solid #ddd\",\n            borderRadius: \"12px\",\n            outline: \"none\",\n            fontSize: \"14px\",\n            resize: \"none\",\n            fontFamily: \"inherit\",\n            lineHeight: \"1.4\",\n            minHeight: \"40px\",\n            maxHeight: \"120px\",\n            overflowY: \"auto\",\n          }}\n        />\n        <button\n          onClick={handleSend}\n          disabled={!message.trim() || isLoading}\n          style={{\n            padding: \"8px 16px\",\n            backgroundColor: \"#2196f3\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"20px\",\n            cursor: isLoading || !message.trim() ? \"not-allowed\" : \"pointer\",\n            opacity: isLoading || !message.trim() ? 0.5 : 1,\n            fontSize: \"14px\",\n            fontWeight: \"bold\",\n            minWidth: \"60px\",\n            height: \"55px\",\n          }}\n        >\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;;AAAA;;;AAQO,MAAM,eAA4C,CAAC,EAAE,aAAa,EAAE,SAAS,EAAE;IACpF,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,iNAAQ,EAAC;IACvC,MAAM,cAAc,IAAA,+MAAM,EAAsB;IAEhD,MAAM,aAAa;QACjB,IAAI,QAAQ,IAAI,MAAM,CAAC,WAAW;YAChC,cAAc,QAAQ,IAAI;YAC1B,WAAW;YACX,kBAAkB;YAClB,IAAI,YAAY,OAAO,EAAE;gBACvB,YAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG;YACrC;QACF;IACF;IAEA,kBAAkB;IAClB,MAAM,uBAAuB;QAC3B,IAAI,YAAY,OAAO,EAAE;YACvB,YAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG;YACnC,YAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,GAAG,CAAC,YAAY,OAAO,CAAC,YAAY,EAAE,OAAO;QACvF;IACF;IAEA,IAAA,kNAAS,EAAC;QACR;IACF,GAAG;QAAC;KAAQ;IAEZ,MAAM,iBAAiB,CAAC;QACtB,IAAI,MAAM,GAAG,KAAK,WAAW,CAAC,MAAM,QAAQ,EAAE;YAC5C,MAAM,cAAc;YACpB;QACF;IACF;IAEA,qBACE,8OAAC;QACC,OAAO;YACL,SAAS;YACT,WAAW;YACX,iBAAiB;QACnB;kBAEA,cAAA,8OAAC;YAAI,OAAO;gBAAE,SAAS;gBAAQ,KAAK;gBAAO,YAAY;YAAW;;8BAChE,8OAAC;oBACC,KAAK;oBACL,OAAO;oBACP,UAAU,CAAC,IAAM,WAAW,EAAE,MAAM,CAAC,KAAK;oBAC1C,YAAY;oBACZ,aAAY;oBACZ,UAAU;oBACV,MAAM;oBACN,OAAO;wBACL,MAAM;wBACN,SAAS;wBACT,QAAQ;wBACR,cAAc;wBACd,SAAS;wBACT,UAAU;wBACV,QAAQ;wBACR,YAAY;wBACZ,YAAY;wBACZ,WAAW;wBACX,WAAW;wBACX,WAAW;oBACb;;;;;;8BAEF,8OAAC;oBACC,SAAS;oBACT,UAAU,CAAC,QAAQ,IAAI,MAAM;oBAC7B,OAAO;wBACL,SAAS;wBACT,iBAAiB;wBACjB,OAAO;wBACP,QAAQ;wBACR,cAAc;wBACd,QAAQ,aAAa,CAAC,QAAQ,IAAI,KAAK,gBAAgB;wBACvD,SAAS,aAAa,CAAC,QAAQ,IAAI,KAAK,MAAM;wBAC9C,UAAU;wBACV,YAAY;wBACZ,UAAU;wBACV,QAAQ;oBACV;8BACD;;;;;;;;;;;;;;;;;AAMT","debugId":null}},
    {"offset": {"line": 1294, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/services/explanationChatService.ts"],"sourcesContent":["import { ChatOpenAI } from \"@langchain/openai\";\nimport { BaseMessage, HumanMessage, SystemMessage, AIMessage } from \"@langchain/core/messages\";\n\nconst OPENAI_API_KEY = process.env.NEXT_PUBLIC_OPENAI_API_KEY;\n\nclass ExplanationChatService {\n  private model: ChatOpenAI;\n  private baseSystemMessage: string;\n  private conversationHistory: BaseMessage[];\n\n  constructor() {\n    if (!OPENAI_API_KEY) {\n      throw new Error(\"OpenAI API key is required. Please set VITE_OPENAI_API_KEY in your environment variables.\");\n    }\n\n    this.model = new ChatOpenAI({\n      apiKey: OPENAI_API_KEY,\n      model: \"gpt-4\",\n      temperature: 0.7,\n    });\n\n    // 解説相談用のシステムメッセージ\n    this.baseSystemMessage = `\n    # 役割\n    あなたは、選択式問題の解説作成を支援する親切なプログラミング教員です。\n\n    # 命令\n    ユーザーが作成している選択式問題の解説について相談に乗ってください。以下の点を重視してサポートしてください：\n    - 学習者にとって理解しやすい解説の書き方をアドバイス\n    - コードの動作や概念の説明方法を提案\n    - 解説の構成や流れについて助言\n    - 具体例や図解の提案\n\n    # 対話上の注意\n    - 出力はマークダウン形式で行ってください\n    - 具体的で実践的なアドバイスを心がけてください\n    - 学習者の視点に立った解説作成を推奨してください\n    - 質問があれば遠慮なく聞いてください\n`;\n    \n    // 対話履歴を初期化\n    this.conversationHistory = this.loadConversationHistory();\n  }\n\n  // localStorageから対話履歴を読み込む\n  private loadConversationHistory(): BaseMessage[] {\n    try {\n      const stored = localStorage.getItem('explanationChatHistory');\n      if (stored) {\n        type HistoryItem = { type: \"system\" | \"human\" | \"ai\"; content: string };\n        const historyData: HistoryItem[] = JSON.parse(stored);\n        return historyData.map((msg) => {\n          switch (msg.type) {\n            case 'system':\n              return new SystemMessage(msg.content);\n            case 'human':\n              return new HumanMessage(msg.content);\n            case 'ai':\n              return new AIMessage(msg.content);\n            default:\n              return new SystemMessage(this.baseSystemMessage);\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to load explanation chat history from localStorage:', error);\n    }\n    return [new SystemMessage(this.baseSystemMessage)];\n  }\n\n  // localStorageに対話履歴を保存する\n  private saveConversationHistory(): void {\n    try {\n      const historyData = this.conversationHistory.map(msg => {\n        let type = 'system';\n        if (msg instanceof HumanMessage) type = 'human';\n        else if (msg instanceof AIMessage) type = 'ai';\n        else if (msg instanceof SystemMessage) type = 'system';\n        \n        return {\n          type,\n          content: msg.content\n        };\n      });\n      localStorage.setItem('explanationChatHistory', JSON.stringify(historyData));\n    } catch (error) {\n      console.error('Failed to save explanation chat history to localStorage:', error);\n    }\n  }\n\n  async sendMessage(message: string): Promise<string> {\n    try {\n      // ユーザーメッセージを履歴に追加\n      const userMessage = new HumanMessage(message);\n      this.conversationHistory.push(userMessage);\n\n      // 現在の対話履歴全体でAPIを呼び出し\n      const response = await this.model.invoke(this.conversationHistory);\n      \n      // AIの返答を履歴に追加\n      const aiMessage = new AIMessage(response.content as string);\n      this.conversationHistory.push(aiMessage);\n\n      // localStorageに保存\n      this.saveConversationHistory();\n\n      return response.content as string;\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      throw new Error(\"Failed to send message. Please check your API key and try again.\");\n    }\n  }\n\n  // 対話履歴をクリアするメソッド\n  clearHistory(): void {\n    this.conversationHistory = [new SystemMessage(this.baseSystemMessage)];\n    this.saveConversationHistory();\n    localStorage.removeItem('explanationChatMessages');\n  }\n\n  // 対話履歴を取得するメソッド（デバッグ用）\n  getHistory(): BaseMessage[] {\n    return [...this.conversationHistory];\n  }\n}\n\nexport const explanationChatService = new ExplanationChatService();"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAEA,MAAM;AAEN,MAAM;IACI,MAAkB;IAClB,kBAA0B;IAC1B,oBAAmC;IAE3C,aAAc;QACZ;;QAIA,IAAI,CAAC,KAAK,GAAG,IAAI,0KAAU,CAAC;YAC1B,QAAQ;YACR,OAAO;YACP,aAAa;QACf;QAEA,kBAAkB;QAClB,IAAI,CAAC,iBAAiB,GAAG,CAAC;;;;;;;;;;;;;;;;AAgB9B,CAAC;QAEG,WAAW;QACX,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,uBAAuB;IACzD;IAEA,0BAA0B;IAClB,0BAAyC;QAC/C,IAAI;YACF,MAAM,SAAS,aAAa,OAAO,CAAC;YACpC,IAAI,QAAQ;gBAEV,MAAM,cAA6B,KAAK,KAAK,CAAC;gBAC9C,OAAO,YAAY,GAAG,CAAC,CAAC;oBACtB,OAAQ,IAAI,IAAI;wBACd,KAAK;4BACH,OAAO,IAAI,kLAAa,CAAC,IAAI,OAAO;wBACtC,KAAK;4BACH,OAAO,IAAI,gLAAY,CAAC,IAAI,OAAO;wBACrC,KAAK;4BACH,OAAO,IAAI,0KAAS,CAAC,IAAI,OAAO;wBAClC;4BACE,OAAO,IAAI,kLAAa,CAAC,IAAI,CAAC,iBAAiB;oBACnD;gBACF;YACF;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8DAA8D;QAC9E;QACA,OAAO;YAAC,IAAI,kLAAa,CAAC,IAAI,CAAC,iBAAiB;SAAE;IACpD;IAEA,yBAAyB;IACjB,0BAAgC;QACtC,IAAI;YACF,MAAM,cAAc,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAA;gBAC/C,IAAI,OAAO;gBACX,IAAI,eAAe,gLAAY,EAAE,OAAO;qBACnC,IAAI,eAAe,0KAAS,EAAE,OAAO;qBACrC,IAAI,eAAe,kLAAa,EAAE,OAAO;gBAE9C,OAAO;oBACL;oBACA,SAAS,IAAI,OAAO;gBACtB;YACF;YACA,aAAa,OAAO,CAAC,0BAA0B,KAAK,SAAS,CAAC;QAChE,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4DAA4D;QAC5E;IACF;IAEA,MAAM,YAAY,OAAe,EAAmB;QAClD,IAAI;YACF,kBAAkB;YAClB,MAAM,cAAc,IAAI,gLAAY,CAAC;YACrC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;YAE9B,qBAAqB;YACrB,MAAM,WAAW,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB;YAEjE,cAAc;YACd,MAAM,YAAY,IAAI,0KAAS,CAAC,SAAS,OAAO;YAChD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;YAE9B,kBAAkB;YAClB,IAAI,CAAC,uBAAuB;YAE5B,OAAO,SAAS,OAAO;QACzB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,iBAAiB;IACjB,eAAqB;QACnB,IAAI,CAAC,mBAAmB,GAAG;YAAC,IAAI,kLAAa,CAAC,IAAI,CAAC,iBAAiB;SAAE;QACtE,IAAI,CAAC,uBAAuB;QAC5B,aAAa,UAAU,CAAC;IAC1B;IAEA,uBAAuB;IACvB,aAA4B;QAC1B,OAAO;eAAI,IAAI,CAAC,mBAAmB;SAAC;IACtC;AACF;AAEO,MAAM,yBAAyB,IAAI","debugId":null}},
    {"offset": {"line": 1422, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/components/ExplanationChatContainer.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type { Message } from '../types/chat';\nimport { MessageList } from './MessageList';\nimport { MessageInput } from './MessageInput';\nimport { explanationChatService } from '../services/explanationChatService';\n\ninterface ExplanationChatContainerProps {\n  showHeader?: boolean;\n}\n\nexport const ExplanationChatContainer: React.FC<ExplanationChatContainerProps> = ({ showHeader = true }) => {\n  // localStorageからメッセージ履歴を読み込む\n  const loadMessages = (): Message[] => {\n    try {\n      const stored = localStorage.getItem('explanationChatMessages');\n      if (stored) {\n        const parsedMessages = JSON.parse(stored) as Message[];\n        return parsedMessages.map((msg) => ({\n          ...msg,\n          timestamp: new Date(msg.timestamp)\n        }));\n      }\n    } catch (error) {\n      console.error('Failed to load explanation chat messages from localStorage:', error);\n    }\n    return [];\n  };\n\n  const [messages, setMessages] = useState<Message[]>(loadMessages);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // メッセージをlocalStorageに保存\n  const saveMessages = (msgs: Message[]) => {\n    try {\n      localStorage.setItem('explanationChatMessages', JSON.stringify(msgs));\n    } catch (error) {\n      console.error('Failed to save explanation chat messages to localStorage:', error);\n    }\n  };\n\n  // messagesが変更されたらlocalStorageに保存\n  useEffect(() => {\n    saveMessages(messages);\n  }, [messages]);\n\n  const handleSendMessage = async (content: string) => {\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      content,\n      sender: 'user',\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n\n    try {\n      const botResponse = await explanationChatService.sendMessage(content);\n      const botMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: botResponse,\n        sender: 'bot',\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: 'Sorry, I encountered an error. Please try again.',\n        sender: 'bot',\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, errorMessage]);\n      console.error('Failed to send message:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleClearHistory = () => {\n    explanationChatService.clearHistory();\n    setMessages([]);\n    localStorage.removeItem('explanationChatMessages');\n  };\n\n  return (\n    <div style={{ \n      display: 'flex', \n      flexDirection: 'column', \n      height: '100%', \n      width: '100%',\n      border: 'none',\n      borderRadius: '0',\n      overflow: 'hidden'\n    }}>\n      {showHeader && (\n        <div style={{ \n          backgroundColor: '#f5f5f5', \n          padding: '16px', \n          borderBottom: '1px solid #ddd',\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        }}>\n          <span style={{ fontWeight: 'bold', fontSize: '14px' }}>解説相談</span>\n          <button\n            onClick={handleClearHistory}\n            style={{\n              padding: '4px 8px',\n              border: '1px solid #ddd',\n              borderRadius: '4px',\n              backgroundColor: 'white',\n              cursor: 'pointer',\n              fontSize: '10px'\n            }}\n          >\n            🗑️ 履歴クリア\n          </button>\n        </div>\n      )}\n      \n      <MessageList messages={messages} isLoading={isLoading} />\n      <MessageInput onSendMessage={handleSendMessage} isLoading={isLoading} />\n      \n    </div>\n  );\n};"],"names":[],"mappings":";;;;;AAAA;AAEA;AACA;AACA;;;;;;AAMO,MAAM,2BAAoE,CAAC,EAAE,aAAa,IAAI,EAAE;IACrG,6BAA6B;IAC7B,MAAM,eAAe;QACnB,IAAI;YACF,MAAM,SAAS,aAAa,OAAO,CAAC;YACpC,IAAI,QAAQ;gBACV,MAAM,iBAAiB,KAAK,KAAK,CAAC;gBAClC,OAAO,eAAe,GAAG,CAAC,CAAC,MAAQ,CAAC;wBAClC,GAAG,GAAG;wBACN,WAAW,IAAI,KAAK,IAAI,SAAS;oBACnC,CAAC;YACH;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,+DAA+D;QAC/E;QACA,OAAO,EAAE;IACX;IAEA,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,iNAAQ,EAAY;IACpD,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,iNAAQ,EAAC;IAE3C,wBAAwB;IACxB,MAAM,eAAe,CAAC;QACpB,IAAI;YACF,aAAa,OAAO,CAAC,2BAA2B,KAAK,SAAS,CAAC;QACjE,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,6DAA6D;QAC7E;IACF;IAEA,iCAAiC;IACjC,IAAA,kNAAS,EAAC;QACR,aAAa;IACf,GAAG;QAAC;KAAS;IAEb,MAAM,oBAAoB,OAAO;QAC/B,MAAM,cAAuB;YAC3B,IAAI,KAAK,GAAG,GAAG,QAAQ;YACvB;YACA,QAAQ;YACR,WAAW,IAAI;QACjB;QAEA,YAAY,CAAA,OAAQ;mBAAI;gBAAM;aAAY;QAC1C,aAAa;QAEb,IAAI;YACF,MAAM,cAAc,MAAM,mKAAsB,CAAC,WAAW,CAAC;YAC7D,MAAM,aAAsB;gBAC1B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,EAAE,QAAQ;gBAC7B,SAAS;gBACT,QAAQ;gBACR,WAAW,IAAI;YACjB;YAEA,YAAY,CAAA,OAAQ;uBAAI;oBAAM;iBAAW;QAC3C,EAAE,OAAO,OAAO;YACd,MAAM,eAAwB;gBAC5B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,EAAE,QAAQ;gBAC7B,SAAS;gBACT,QAAQ;gBACR,WAAW,IAAI;YACjB;YAEA,YAAY,CAAA,OAAQ;uBAAI;oBAAM;iBAAa;YAC3C,QAAQ,KAAK,CAAC,2BAA2B;QAC3C,SAAU;YACR,aAAa;QACf;IACF;IAEA,MAAM,qBAAqB;QACzB,mKAAsB,CAAC,YAAY;QACnC,YAAY,EAAE;QACd,aAAa,UAAU,CAAC;IAC1B;IAEA,qBACE,8OAAC;QAAI,OAAO;YACV,SAAS;YACT,eAAe;YACf,QAAQ;YACR,OAAO;YACP,QAAQ;YACR,cAAc;YACd,UAAU;QACZ;;YACG,4BACC,8OAAC;gBAAI,OAAO;oBACV,iBAAiB;oBACjB,SAAS;oBACT,cAAc;oBACd,SAAS;oBACT,gBAAgB;oBAChB,YAAY;gBACd;;kCACE,8OAAC;wBAAK,OAAO;4BAAE,YAAY;4BAAQ,UAAU;wBAAO;kCAAG;;;;;;kCACvD,8OAAC;wBACC,SAAS;wBACT,OAAO;4BACL,SAAS;4BACT,QAAQ;4BACR,cAAc;4BACd,iBAAiB;4BACjB,QAAQ;4BACR,UAAU;wBACZ;kCACD;;;;;;;;;;;;0BAML,8OAAC,gJAAW;gBAAC,UAAU;gBAAU,WAAW;;;;;;0BAC5C,8OAAC,kJAAY;gBAAC,eAAe;gBAAmB,WAAW;;;;;;;;;;;;AAIjE","debugId":null}},
    {"offset": {"line": 1595, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/components/ModeChangeConfirmDialog.tsx"],"sourcesContent":["import React from 'react';\nimport type { CreationMode } from './CreationModeSelector';\n\ninterface ModeChangeConfirmDialogProps {\n  isOpen: boolean;\n  newMode: CreationMode;\n  onConfirm: () => void;\n  onCancel: () => void;\n}\n\nexport const ModeChangeConfirmDialog: React.FC<ModeChangeConfirmDialogProps> = ({\n  isOpen,\n  newMode,\n  onConfirm,\n  onCancel\n}) => {\n  if (!isOpen) return null;\n\n  const modeText = newMode === 'auto' ? '自動生成' : '手動作成';\n\n  return (\n    <div style={{\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      zIndex: 1000\n    }}>\n      <div style={{\n        backgroundColor: 'white',\n        padding: '24px',\n        borderRadius: '12px',\n        maxWidth: '450px',\n        width: '90%',\n        boxShadow: '0 4px 20px rgba(0, 0, 0, 0.15)'\n      }}>\n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          marginBottom: '16px'\n        }}>\n          <span style={{\n            fontSize: '24px',\n            marginRight: '12px'\n          }}>\n            ⚠️\n          </span>\n          <h3 style={{ \n            margin: 0,\n            fontSize: '18px',\n            color: '#ff9800'\n          }}>\n            作成モード変更の確認\n          </h3>\n        </div>\n        \n        <div style={{\n          backgroundColor: '#fff3cd',\n          border: '1px solid #ffeaa7',\n          borderRadius: '8px',\n          padding: '16px',\n          marginBottom: '20px'\n        }}>\n          <p style={{ \n            margin: 0,\n            fontSize: '14px',\n            lineHeight: '1.6',\n            color: '#856404'\n          }}>\n            <strong>「{modeText}」</strong>に切り替えると、以下の内容がクリアされます：\n          </p>\n          <ul style={{\n            margin: '12px 0 0 0',\n            paddingLeft: '20px',\n            fontSize: '13px',\n            color: '#856404'\n          }}>\n            <li>生成済みの選択式問題</li>\n            <li>入力済みの解説内容</li>\n            <li>その他の編集内容</li>\n          </ul>\n        </div>\n\n        <p style={{ \n          fontSize: '14px',\n          color: '#333',\n          marginBottom: '24px',\n          lineHeight: '1.5'\n        }}>\n          本当に「<strong>{modeText}</strong>」モードに切り替えますか？\n        </p>\n        \n        <div style={{ \n          display: 'flex', \n          justifyContent: 'flex-end',\n          gap: '12px'\n        }}>\n          <button\n            onClick={onCancel}\n            style={{\n              padding: '10px 20px',\n              border: '1px solid #ddd',\n              borderRadius: '6px',\n              backgroundColor: 'white',\n              cursor: 'pointer',\n              fontSize: '14px'\n            }}\n          >\n            キャンセル\n          </button>\n          <button\n            onClick={onConfirm}\n            style={{\n              padding: '10px 20px',\n              border: 'none',\n              borderRadius: '6px',\n              backgroundColor: '#ff9800',\n              color: 'white',\n              cursor: 'pointer',\n              fontSize: '14px',\n              fontWeight: 'bold'\n            }}\n          >\n            切り替える\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};"],"names":[],"mappings":";;;;;;AAUO,MAAM,0BAAkE,CAAC,EAC9E,MAAM,EACN,OAAO,EACP,SAAS,EACT,QAAQ,EACT;IACC,IAAI,CAAC,QAAQ,OAAO;IAEpB,MAAM,WAAW,YAAY,SAAS,SAAS;IAE/C,qBACE,8OAAC;QAAI,OAAO;YACV,UAAU;YACV,KAAK;YACL,MAAM;YACN,OAAO;YACP,QAAQ;YACR,iBAAiB;YACjB,SAAS;YACT,gBAAgB;YAChB,YAAY;YACZ,QAAQ;QACV;kBACE,cAAA,8OAAC;YAAI,OAAO;gBACV,iBAAiB;gBACjB,SAAS;gBACT,cAAc;gBACd,UAAU;gBACV,OAAO;gBACP,WAAW;YACb;;8BACE,8OAAC;oBAAI,OAAO;wBACV,SAAS;wBACT,YAAY;wBACZ,cAAc;oBAChB;;sCACE,8OAAC;4BAAK,OAAO;gCACX,UAAU;gCACV,aAAa;4BACf;sCAAG;;;;;;sCAGH,8OAAC;4BAAG,OAAO;gCACT,QAAQ;gCACR,UAAU;gCACV,OAAO;4BACT;sCAAG;;;;;;;;;;;;8BAKL,8OAAC;oBAAI,OAAO;wBACV,iBAAiB;wBACjB,QAAQ;wBACR,cAAc;wBACd,SAAS;wBACT,cAAc;oBAChB;;sCACE,8OAAC;4BAAE,OAAO;gCACR,QAAQ;gCACR,UAAU;gCACV,YAAY;gCACZ,OAAO;4BACT;;8CACE,8OAAC;;wCAAO;wCAAE;wCAAS;;;;;;;gCAAU;;;;;;;sCAE/B,8OAAC;4BAAG,OAAO;gCACT,QAAQ;gCACR,aAAa;gCACb,UAAU;gCACV,OAAO;4BACT;;8CACE,8OAAC;8CAAG;;;;;;8CACJ,8OAAC;8CAAG;;;;;;8CACJ,8OAAC;8CAAG;;;;;;;;;;;;;;;;;;8BAIR,8OAAC;oBAAE,OAAO;wBACR,UAAU;wBACV,OAAO;wBACP,cAAc;wBACd,YAAY;oBACd;;wBAAG;sCACG,8OAAC;sCAAQ;;;;;;wBAAkB;;;;;;;8BAGjC,8OAAC;oBAAI,OAAO;wBACV,SAAS;wBACT,gBAAgB;wBAChB,KAAK;oBACP;;sCACE,8OAAC;4BACC,SAAS;4BACT,OAAO;gCACL,SAAS;gCACT,QAAQ;gCACR,cAAc;gCACd,iBAAiB;gCACjB,QAAQ;gCACR,UAAU;4BACZ;sCACD;;;;;;sCAGD,8OAAC;4BACC,SAAS;4BACT,OAAO;gCACL,SAAS;gCACT,QAAQ;gCACR,cAAc;gCACd,iBAAiB;gCACjB,OAAO;gCACP,QAAQ;gCACR,UAAU;gCACV,YAAY;4BACd;sCACD;;;;;;;;;;;;;;;;;;;;;;;AAOX","debugId":null}},
    {"offset": {"line": 1825, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/app/create-mcq/page.tsx"],"sourcesContent":["\"use client\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useRouter } from 'next/navigation'; \nimport Editor from '@monaco-editor/react';\nimport { useProblem } from '@/contexts/ProblemContext';\nimport { CreationModeSelector } from '@/components/CreationModeSelector';\nimport type { CreationMode } from '@/components/CreationModeSelector';\nimport { AutoGenerationMode } from '@/components/AutoGenerationMode';\nimport { ManualCreationMode } from '@/components/ManualCreationMode';\nimport { ExplanationChatContainer } from '@/components/ExplanationChatContainer';\nimport { ModeChangeConfirmDialog } from '@/components/ModeChangeConfirmDialog';\nimport type { AutoGenerationResponse } from '@/types/quiz';\nimport type * as monacoEditor from 'monaco-editor';\n\nconst QuizCreationPage: React.FC = () => {\n  const router = useRouter();\n  const { problemData } = useProblem();\n  const learningTopic = problemData.learningTopic || '';\n  const [creationMode, setCreationMode] = useState<CreationMode>('auto');\n  const [explanation, setExplanation] = useState('');\n  const [generatedQuiz, setGeneratedQuiz] = useState<AutoGenerationResponse | null>(null);\n  const [showModeChangeDialog, setShowModeChangeDialog] = useState(false);\n  const [pendingMode, setPendingMode] = useState<CreationMode>('auto');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [hasManualData, setHasManualData] = useState(false);\n  const [isChatPopupOpen, setIsChatPopupOpen] = useState(false);\n  const [codeWithBlanks, setCodeWithBlanks] = useState(problemData.code);\n  const [editedProblem, setEditedProblem] = useState(problemData.problem);\n  const editorRef = useRef<monacoEditor.editor.IStandaloneCodeEditor | null>(null);\n  const monacoRef = useRef<typeof monacoEditor | null>(null);\n  const decorationsRef = useRef<string[]>([]);\n\n  const handleBackToHome = () => {\n    router.push('/create-quiz');\n  };\n\n  const handleQuizGenerated = (quiz: AutoGenerationResponse) => {\n    setGeneratedQuiz(quiz);\n    setExplanation(quiz.explanation);\n    // 自動生成時でも元のコードを保持するため、codeWithBlanksの更新をしない\n    // if (quiz.codeWithBlanks) {\n    //   setCodeWithBlanks(quiz.codeWithBlanks);\n    // }\n  };\n\n  const handleModeChangeRequest = (newMode: CreationMode) => {\n    // 編集内容があるかチェック\n    const hasAutoContent = generatedQuiz !== null || explanation.trim() !== '';\n    const hasEditingContent = hasAutoContent || hasManualData;\n    \n    if (hasEditingContent) {\n      setPendingMode(newMode);\n      setShowModeChangeDialog(true);\n    } else {\n      // 編集内容がない場合は直接変更\n      setCreationMode(newMode);\n    }\n  };\n\n  const handleModeChangeConfirm = () => {\n    // 状態をリセット\n    setGeneratedQuiz(null);\n    setExplanation('');\n    setHasManualData(false);\n    setCodeWithBlanks(problemData.code);\n    setEditedProblem(problemData.problem);\n    setCreationMode(pendingMode);\n    setShowModeChangeDialog(false);\n  };\n\n  const handleCodeChange = (value: string | undefined) => {\n    setCodeWithBlanks(value || '');\n  };\n\n  const handleCodeReset = () => {\n    setCodeWithBlanks(problemData.code);\n  };\n\n  const handleProblemReset = () => {\n    setEditedProblem(problemData.problem);\n  };\n\n  const getLanguageLabel = (language: string): string => {\n    const languageMap: Record<string, string> = {\n      typescript: 'TypeScript',\n      javascript: 'JavaScript',\n      python: 'Python',\n      java: 'Java',\n      cpp: 'C++',\n      c: 'C',\n      csharp: 'C#',\n      go: 'Go',\n      rust: 'Rust',\n      php: 'PHP',\n      ruby: 'Ruby',\n      swift: 'Swift',\n      kotlin: 'Kotlin',\n      html: 'HTML',\n      css: 'CSS',\n      json: 'JSON',\n      sql: 'SQL',\n      shell: 'Shell',\n    };\n    return languageMap[language] || language;\n  };\n\n  const handleModeChangeCancel = () => {\n    setShowModeChangeDialog(false);\n  };\n\n  // ハイライト更新関数\n  const updateHighlights = () => {\n    if (editorRef.current && monacoRef.current && creationMode === 'manual') {\n      const model = editorRef.current.getModel();\n      if (model) {\n        const text = model.getValue();\n        const decorations = [];\n        const regex = /___BLANK___/g;\n        let match;\n        \n        console.log('Updating highlights for manual mode, text:', text);\n        \n        while ((match = regex.exec(text)) !== null) {\n          const startPos = model.getPositionAt(match.index);\n          const endPos = model.getPositionAt(match.index + match[0].length);\n          \n          console.log('Found ___BLANK___ at:', startPos, 'to', endPos);\n          \n          decorations.push({\n            range: new monacoRef.current.Range(\n              startPos.lineNumber,\n              startPos.column,\n              endPos.lineNumber,\n              endPos.column\n            ),\n            options: {\n              inlineClassName: 'my-blank-highlight'\n            }\n          });\n        }\n        \n        console.log('Applying decorations:', decorations);\n        // 古いデコレーションを削除して新しいものを適用\n        decorationsRef.current = editorRef.current.deltaDecorations(decorationsRef.current, decorations);\n      }\n    }\n  };\n\n  // creationModeが変更されたときにハイライトを更新\n  useEffect(() => {\n    console.log('creationMode changed to:', creationMode);\n    updateHighlights();\n  }, [creationMode, codeWithBlanks]);\n\n  const handleFinish = () => {\n    if (!explanation.trim()) {\n      alert('解説を入力してください');\n      return;\n    }\n\n    // TODO: 問題の保存・エクスポート機能を実装\n    alert('問題が完成しました！（保存機能は今後実装予定）');\n  };\n\n  return (\n    <div style={{ \n      display: 'flex', \n      height: '100vh',\n      width: '100vw',\n      overflow: 'hidden',\n      position: 'relative'\n    }}>\n      {/* メイン: 選択式問題作成エリア */}\n      <div style={{ \n        width: isChatPopupOpen ? '70%' : '100%',\n        height: '100vh',\n        minWidth: 0,\n        flex: isChatPopupOpen ? '0 0 70%' : '1 1 100%',\n        display: 'flex',\n        flexDirection: 'column',\n        transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n        overflow: 'hidden'\n      }}>\n        {/* ヘッダー */}\n        <div style={{ \n          padding: '16px', \n          backgroundColor: '#f8f9fa',\n          borderBottom: '1px solid #ddd',\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        }}>\n          <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>\n            <h1 style={{ \n              fontWeight: 'bold', \n              fontSize: '18px',\n              margin: 0,\n              color: '#2c3e50',\n              borderLeft: '4px solid #3498db',\n              paddingLeft: '12px'\n            }}>\n              選択式問題の作成\n            </h1>\n            <div style={{\n              height: '30px',\n              width: '1px',\n              backgroundColor: '#bbb',\n              margin: '0 4px'\n            }}></div>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n              <span style={{ \n                fontSize: '13px', \n                fontWeight: '500', \n                color: '#666',\n                textTransform: 'uppercase',\n                letterSpacing: '0.5px'\n              }}>\n                📚学習項目：\n              </span>\n              <div style={{\n                padding: '6px 14px',\n                border: '2px solid #e3f2fd',\n                borderRadius: '20px',\n                fontSize: '14px',\n                fontWeight: 'bold',\n                backgroundColor: '#e3f2fd',\n                color: '#1976d2',\n                boxShadow: '0 2px 4px rgba(33, 150, 243, 0.15)',\n                minWidth: '120px',\n                textAlign: 'center',\n                position: 'relative'\n              }}>\n                {learningTopic || '未設定'}\n              </div>\n            </div>\n          </div>\n          <div style={{ display: 'flex', gap: '8px' }}>\n            <button\n              onClick={() => setIsChatPopupOpen(true)}\n              style={{\n                padding: '6px 12px',\n                border: '1px solid #4CAF50',\n                borderRadius: '4px',\n                backgroundColor: '#4CAF50',\n                color: 'white',\n                cursor: 'pointer',\n                fontSize: '12px',\n                fontWeight: 'bold'\n              }}\n            >\n              💬 解説相談\n            </button>\n            <button\n              onClick={handleBackToHome}\n              style={{\n                padding: '6px 12px',\n                border: '1px solid #ddd',\n                borderRadius: '4px',\n                backgroundColor: 'white',\n                cursor: 'pointer',\n                fontSize: '12px'\n              }}\n            >\n              ← 戻る\n            </button>\n          </div>\n        </div>\n        \n        {/* コンテンツエリア */}\n        <div style={{ \n          flex: 1, \n          padding: '20px',\n          backgroundColor: '#fafafa',\n          overflow: 'auto',\n          minHeight: 0,\n          position: 'relative'\n        }}>\n          {/* 作成モード選択 */}\n          <CreationModeSelector \n            value={creationMode} \n            onChange={setCreationMode}\n            onModeChangeRequest={handleModeChangeRequest}\n            disabled={isGenerating}\n          />\n\n          {/* 手動作成の手順（手動モード時のみ表示） */}\n          {creationMode === 'manual' && (\n            <div style={{ \n              marginBottom: '24px', \n              padding: '16px', \n              backgroundColor: '#fff3cd', \n              border: '1px solid #ffeaa7', \n              borderRadius: '8px',\n              boxShadow: '0 2px 4px rgba(255, 193, 7, 0.1)'\n            }}>\n              <div style={{ \n                display: 'flex', \n                alignItems: 'center', \n                marginBottom: '12px',\n                gap: '8px'\n              }}>\n                <span style={{ fontSize: '20px' }}>📝</span>\n                <h4 style={{ \n                  fontSize: '16px', \n                  fontWeight: 'bold', \n                  margin: 0,\n                  color: '#856404'\n                }}>\n                  手動作成の手順\n                </h4>\n              </div>\n              <ol style={{ \n                fontSize: '14px', \n                lineHeight: '1.6', \n                color: '#856404', \n                paddingLeft: '20px',\n                margin: '0'\n              }}>\n                <li style={{ marginBottom: '6px' }}>\n                  <strong>問題文</strong>と<strong>解答コード</strong>エリアで内容を編集\n                </li>\n                <li style={{ marginBottom: '6px' }}>\n                  解答コードでは空欄を<strong><code style={{ \n                    backgroundColor: '#fff8dc', \n                    padding: '2px 4px', \n                    borderRadius: '3px',\n                    fontSize: '13px'\n                  }}>___BLANK___</code></strong>で表現してください\n                </li>\n                <li style={{ marginBottom: '6px' }}>\n                  下の<strong>選択肢</strong>を入力（選択肢Aが正答です）\n                </li>\n                <li>\n                  <strong>「リセットする」</strong>ボタンで問題文・コードを元に戻せます\n                </li>\n              </ol>\n            </div>\n          )}\n\n          {/* 問題文と解答コード */}\n          <div style={{ \n            marginBottom: '20px',\n            display: 'flex',\n            gap: '20px'\n          }}>\n            {/* 問題文 */}\n            <div style={{ flex: 1 }}>\n              <div style={{\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                marginBottom: '8px'\n              }}>\n                <h4 style={{ fontSize: '14px', fontWeight: 'bold', margin: 0 }}>\n                  作成した問題文\n                </h4>\n                {creationMode === 'manual' && (\n                  <button\n                    onClick={handleProblemReset}\n                    style={{\n                      padding: '6px 12px',\n                      backgroundColor: '#ff9800',\n                      color: 'white',\n                      border: 'none',\n                      borderRadius: '4px',\n                      cursor: 'pointer',\n                      fontSize: '12px',\n                      fontWeight: 'bold'\n                    }}\n                  >\n                    リセットする\n                  </button>\n                )}\n              </div>\n              {creationMode === 'manual' ? (\n                <textarea\n                  value={editedProblem || ''}\n                  onChange={(e) => setEditedProblem(e.target.value)}\n                  placeholder=\"問題文を入力してください\"\n                  style={{\n                    width: '97%',\n                    padding: '12px',\n                    border: '1px solid #ddd',\n                    borderRadius: '4px',\n                    fontSize: '14px',\n                    lineHeight: '1.6',\n                    height: '500px',\n                    resize: 'vertical',\n                    fontFamily: 'inherit'\n                  }}\n                />\n              ) : (\n                <div style={{\n                  padding: '12px',\n                  border: '1px solid #ddd',\n                  borderRadius: '4px',\n                  backgroundColor: 'white',\n                  fontSize: '14px',\n                  lineHeight: '1.6',\n                  minHeight: '500px',\n                  overflow: 'auto',\n                  whiteSpace: 'pre-wrap'\n                }}>\n                  {problemData.problem || '問題文が入力されていません'}\n                </div>\n              )}\n            </div>\n\n            {/* 解答コード */}\n            <div style={{ flex: 1 }}>\n              <div style={{\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                marginBottom: '8px'\n              }}>\n                <h4 style={{ fontSize: '14px', fontWeight: 'bold', margin: 0 }}>\n                  作成した解答コード ({getLanguageLabel(problemData.language)})\n                </h4>\n                {creationMode == 'manual' && (<button\n                  onClick={handleCodeReset}\n                  style={{\n                    padding: '6px 12px',\n                    backgroundColor: '#ff9800',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                    fontSize: '12px',\n                    fontWeight: 'bold'\n                  }}\n                >\n                  リセットする\n                </button>)}\n              </div>\n              <div style={{ height: '500px', border: '1px solid #ddd', borderRadius: '4px' }}>\n                <Editor\n                  height=\"100%\"\n                  language={problemData.language}\n                  value={codeWithBlanks || problemData.code}\n                  onChange={creationMode === 'manual' ? handleCodeChange : undefined}\n                  onMount={(editor, monaco) => {\n                    console.log('Monaco Editor mounted, creationMode:', creationMode);\n                    // エディタとmonacoのrefを保存\n                    editorRef.current = editor;\n                    monacoRef.current = monaco;\n                    \n                    // テキスト変更時にハイライトを更新\n                    editor.onDidChangeModelContent(() => {\n                      updateHighlights();\n                    });\n                    \n                    // 初期ハイライト\n                    updateHighlights();\n                  }}\n                  options={{\n                    readOnly: creationMode !== 'manual',\n                    minimap: { enabled: false },\n                    fontSize: 14,\n                    lineNumbers: 'on',\n                    wordWrap: 'on',\n                    scrollBeyondLastLine: false,\n                    automaticLayout: true,\n                  }}\n                  theme=\"vs-light\"\n                />\n              </div>\n              <p style={{ \n                fontSize: '12px', \n                color: '#666', \n                marginTop: '4px',\n                marginBottom: '0'\n              }}>\n                {creationMode === 'manual' \n                  ? '空欄は「_ _ _BLANK_ _ _」で表現してください（編集可能）'\n                  : '自動生成モード（表示のみ）'\n                }\n              </p>\n            </div>\n          </div>\n\n          {/* モード別のコンテンツ */}\n          {creationMode === 'auto' ? (\n            <AutoGenerationMode \n              learningTopic={learningTopic}\n              onQuizGenerated={handleQuizGenerated}\n              onGeneratingStateChange={setIsGenerating}\n            />\n          ) : (\n            <ManualCreationMode \n              learningTopic={learningTopic}\n              onManualDataChange={setHasManualData}\n            />\n          )}\n\n          {/* 完了ボタン */}\n          {(generatedQuiz || creationMode === 'manual') && (\n            <div style={{ textAlign: 'center', marginTop: '20px' }}>\n              <button\n                onClick={handleFinish}\n                style={{\n                  padding: '12px 30px',\n                  backgroundColor: '#4CAF50',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '6px',\n                  cursor: 'pointer',\n                  fontSize: '16px',\n                  fontWeight: 'bold'\n                }}\n              >\n                問題作成完了\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* 右側: 解説相談エリア */}\n      <div style={{ \n        width: isChatPopupOpen ? '30%' : '0%',\n        height: '100vh',\n        minWidth: 0,\n        flex: isChatPopupOpen ? '0 0 30%' : '0 0 0%',\n        borderLeft: isChatPopupOpen ? '1px solid #ddd' : 'none',\n        display: 'flex',\n        flexDirection: 'column',\n        transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n        backgroundColor: 'white',\n        overflow: 'hidden',\n        opacity: isChatPopupOpen ? 1 : 0,\n        visibility: isChatPopupOpen ? 'visible' : 'hidden'\n      }}>\n          {/* ヘッダー */}\n          <div style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            padding: '16px 20px',\n            borderBottom: '1px solid #ddd',\n            backgroundColor: '#f8f9fa'\n          }}>\n            <span style={{ fontWeight: 'bold', fontSize: '16px' }}>解説相談</span>\n            <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\n              <button\n                onClick={() => {\n                  // 履歴クリア処理\n                  localStorage.removeItem('explanationChatMessages');\n                  window.location.reload();\n                }}\n                style={{\n                  padding: '4px 8px',\n                  border: '1px solid #ddd',\n                  borderRadius: '4px',\n                  backgroundColor: 'white',\n                  cursor: 'pointer',\n                  fontSize: '12px'\n                }}\n              >\n                🗑️ 履歴クリア\n              </button>\n              <button\n                onClick={() => setIsChatPopupOpen(false)}\n                style={{\n                  background: 'none',\n                  border: 'none',\n                  fontSize: '20px',\n                  cursor: 'pointer',\n                  color: '#666',\n                  padding: '0',\n                  width: '24px',\n                  height: '24px',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center'\n                }}\n              >\n                ×\n              </button>\n            </div>\n          </div>\n\n          {/* チャットコンテンツ */}\n          <div style={{ \n            flex: 1,\n            overflow: 'hidden'\n          }}>\n            <div style={{ height: '100%' }}>\n              {isChatPopupOpen && <ExplanationChatContainer showHeader={false} />}\n            </div>\n          </div>\n        </div>\n\n      {/* Mode change confirmation dialog */}\n      <ModeChangeConfirmDialog\n        isOpen={showModeChangeDialog}\n        newMode={pendingMode}\n        onConfirm={handleModeChangeConfirm}\n        onCancel={handleModeChangeCancel}\n      />\n    </div>\n  );\n};\n\nexport default QuizCreationPage\n"],"names":[],"mappings":"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","debugId":null}}]
}