{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/lib/supabaseClient.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.warn('⚠️ Supabase environment variables are not set.');\n  console.warn('Please set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY in your .env file.');\n  console.warn('Using dummy values for development - authentication will not work.');\n}\n\nexport const supabase = createClient(\n  supabaseUrl || 'https://dummy.supabase.co',\n  supabaseAnonKey || 'dummy-anon-key'\n);\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,cAAc,gFAAwC;AAC5D,MAAM,kBAAkB,wPAA6C;AAErE;;AAMO,MAAM,WAAW,IAAA,uMAAY,EAClC,eAAe,6BACf,mBAAmB","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/contexts/AuthContext.tsx"],"sourcesContent":["\"use client\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabaseClient';\nimport type { User, Session } from '@supabase/supabase-js';\nimport type { Profile } from '../types/database';\n\ninterface AuthContextType {\n  user: User | null;\n  profile: Profile | null;\n  session: Session | null;\n  loading: boolean;\n  signInWithGoogle: () => Promise<void>;\n  signOut: () => Promise<void>;\n  isAdmin: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [profile, setProfile] = useState<Profile | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // 初期セッションの取得\n    supabase.auth.getSession()\n      .then(({ data: { session } }) => {\n        setSession(session);\n        setUser(session?.user ?? null);\n        if (session?.user) {\n          fetchProfile(session.user.id);\n        } else {\n          setLoading(false);\n        }\n      })\n      .catch((err) => {\n        console.error('Error getting session:', err);\n        setError('認証の初期化に失敗しました');\n        setLoading(false);\n      });\n\n    // 認証状態の変更を監視\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (_event, session) => {\n      setSession(session);\n      setUser(session?.user ?? null);\n\n      if (session?.user) {\n        await fetchProfile(session.user.id);\n      } else {\n        setProfile(null);\n        setLoading(false);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const fetchProfile = async (userId: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      if (error) {\n        console.error('Error fetching profile:', error);\n        // プロファイルが存在しない場合は作成する\n        if (error.code === 'PGRST116') {\n          await createProfile(userId);\n        }\n      } else {\n        setProfile(data);\n      }\n    } catch (error) {\n      console.error('Error in fetchProfile:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createProfile = async (userId: string) => {\n    try {\n      const { data: userData } = await supabase.auth.getUser();\n      const email = userData.user?.email || '';\n\n      const { data, error } = await supabase\n        .from('profiles')\n        .insert([\n          {\n            id: userId,\n            email: email,\n            is_admin: false,\n          },\n        ])\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Error creating profile:', error);\n      } else {\n        setProfile(data);\n      }\n    } catch (error) {\n      console.error('Error in createProfile:', error);\n    }\n  };\n\n  const signInWithGoogle = async () => {\n    try {\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: `${window.location.origin}/dashboard`,\n        },\n      });\n\n      if (error) {\n        console.error('Error signing in with Google:', error);\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error in signInWithGoogle:', error);\n      throw error;\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) {\n        console.error('Error signing out:', error);\n        throw error;\n      }\n      setUser(null);\n      setProfile(null);\n      setSession(null);\n    } catch (error) {\n      console.error('Error in signOut:', error);\n      throw error;\n    }\n  };\n\n  const isAdmin = profile?.is_admin ?? false;\n\n  const value: AuthContextType = {\n    user,\n    profile,\n    session,\n    loading,\n    signInWithGoogle,\n    signOut,\n    isAdmin,\n  };\n\n  // エラーが発生した場合は表示\n  if (error) {\n    return (\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh',\n        flexDirection: 'column',\n        padding: '20px'\n      }}>\n        <h2 style={{ color: '#e74c3c' }}>認証エラー</h2>\n        <p>{error}</p>\n        <button onClick={() => window.location.reload()}>\n          再読み込み\n        </button>\n      </div>\n    );\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":["file:///Users/hisaya.kobayashi/MyProject/quiz-creation-chatbot/src/contexts/ProblemContext.tsx"],"sourcesContent":["\"use client\";\nimport React, { createContext, useContext, useState } from 'react';\n\nexport type LearningTopic = '制御構造' | 'クラス' | string;\n\ninterface ProblemData {\n  problem: string;\n  code: string;\n  language: string;\n  learningTopic: LearningTopic;\n}\n\ninterface ProblemContextType {\n  problemData: ProblemData;\n  setProblemData: (data: ProblemData) => void;\n  setLearningTopic: (topic: LearningTopic) => void;\n}\n\nconst ProblemContext = createContext<ProblemContextType | undefined>(undefined);\n\nexport const ProblemProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  // 初期データ（メモリ内のみで管理）\n  const initialData: ProblemData = {\n    problem: '',\n    code: '',\n    language: 'typescript',\n    learningTopic: '制御構造'\n  };\n\n  const [problemData, setProblemData] = useState<ProblemData>(initialData);\n\n  // 学習項目のみを更新する関数\n  const setLearningTopic = (topic: LearningTopic) => {\n    const updatedData = { ...problemData, learningTopic: topic };\n    setProblemData(updatedData);\n  };\n\n  return (\n    <ProblemContext.Provider value={{ problemData, setProblemData, setLearningTopic }}>\n      {children}\n    </ProblemContext.Provider>\n  );\n};\n\nexport const useProblem = () => {\n  const context = useContext(ProblemContext);\n  if (context === undefined) {\n    throw new Error('useProblem must be used within a ProblemProvider');\n  }\n  return context;\n};"],"names":[],"mappings":";;;;;;;AACA;AADA;;;AAkBA,MAAM,+BAAiB,IAAA,sNAAa,EAAiC;AAE9D,MAAM,kBAA2D,CAAC,EAAE,QAAQ,EAAE;IACnF,mBAAmB;IACnB,MAAM,cAA2B;QAC/B,SAAS;QACT,MAAM;QACN,UAAU;QACV,eAAe;IACjB;IAEA,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,iNAAQ,EAAc;IAE5D,gBAAgB;IAChB,MAAM,mBAAmB,CAAC;QACxB,MAAM,cAAc;YAAE,GAAG,WAAW;YAAE,eAAe;QAAM;QAC3D,eAAe;IACjB;IAEA,qBACE,8OAAC,eAAe,QAAQ;QAAC,OAAO;YAAE;YAAa;YAAgB;QAAiB;kBAC7E;;;;;;AAGP;AAEO,MAAM,aAAa;IACxB,MAAM,UAAU,IAAA,mNAAU,EAAC;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}}]
}